
MCAL_SYNC_ASYNC_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009c4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000006  00800060  00800060  00000a38  2**0
                  ALLOC
  2 .stab         00000b94  00000000  00000000  00000a38  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000005fb  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a6 36       	cpi	r26, 0x66	; 102
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b9 04 	call	0x972	; 0x972 <main>
  74:	0c 94 e0 04 	jmp	0x9c0	; 0x9c0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ADC_voidInit>:
//this variable takes value told me that ADC is now Busy or not
//not to make new conversion while there is conversion happen
u8 ADC_BUSY_STATE= IDLE ;

void ADC_voidInit (void)
{
  7c:	df 93       	push	r29
  7e:	cf 93       	push	r28
  80:	cd b7       	in	r28, 0x3d	; 61
  82:	de b7       	in	r29, 0x3e	; 62
	      /*ADMUX_register */
	//AVCC as reference voltage
	SET_BIT(ADMUX,ADMUX_REFSO);
  84:	a7 e2       	ldi	r26, 0x27	; 39
  86:	b0 e0       	ldi	r27, 0x00	; 0
  88:	e7 e2       	ldi	r30, 0x27	; 39
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
  92:	a7 e2       	ldi	r26, 0x27	; 39
  94:	b0 e0       	ldi	r27, 0x00	; 0
  96:	e7 e2       	ldi	r30, 0x27	; 39
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	80 81       	ld	r24, Z
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	8c 93       	st	X, r24

	//Activate left adjust to use 8 bits
	SET_BIT(ADMUX,ADMUX_ADLAR);
  a0:	a7 e2       	ldi	r26, 0x27	; 39
  a2:	b0 e0       	ldi	r27, 0x00	; 0
  a4:	e7 e2       	ldi	r30, 0x27	; 39
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	80 81       	ld	r24, Z
  aa:	80 62       	ori	r24, 0x20	; 32
  ac:	8c 93       	st	X, r24

	//Set Pre scaler to divide by 128
	SET_BIT(ADCSRA,ADCSRA_ADPSO);
  ae:	a6 e2       	ldi	r26, 0x26	; 38
  b0:	b0 e0       	ldi	r27, 0x00	; 0
  b2:	e6 e2       	ldi	r30, 0x26	; 38
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	80 81       	ld	r24, Z
  b8:	81 60       	ori	r24, 0x01	; 1
  ba:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
  bc:	a6 e2       	ldi	r26, 0x26	; 38
  be:	b0 e0       	ldi	r27, 0x00	; 0
  c0:	e6 e2       	ldi	r30, 0x26	; 38
  c2:	f0 e0       	ldi	r31, 0x00	; 0
  c4:	80 81       	ld	r24, Z
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
  ca:	a6 e2       	ldi	r26, 0x26	; 38
  cc:	b0 e0       	ldi	r27, 0x00	; 0
  ce:	e6 e2       	ldi	r30, 0x26	; 38
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	84 60       	ori	r24, 0x04	; 4
  d6:	8c 93       	st	X, r24

	//Enable peripheral-should be last part to make enable while every thing is OK
	SET_BIT(ADCSRA,ADCSRA_ADEN);
  d8:	a6 e2       	ldi	r26, 0x26	; 38
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	e6 e2       	ldi	r30, 0x26	; 38
  de:	f0 e0       	ldi	r31, 0x00	; 0
  e0:	80 81       	ld	r24, Z
  e2:	80 68       	ori	r24, 0x80	; 128
  e4:	8c 93       	st	X, r24
}
  e6:	cf 91       	pop	r28
  e8:	df 91       	pop	r29
  ea:	08 95       	ret

000000ec <ADC_SYNC_StartConversion>:

u8  ADC_SYNC_StartConversion(u8 Copy_u8Channel, u8* ADC_u8_Reading)
{
  ec:	df 93       	push	r29
  ee:	cf 93       	push	r28
  f0:	cd b7       	in	r28, 0x3d	; 61
  f2:	de b7       	in	r29, 0x3e	; 62
  f4:	28 97       	sbiw	r28, 0x08	; 8
  f6:	0f b6       	in	r0, 0x3f	; 63
  f8:	f8 94       	cli
  fa:	de bf       	out	0x3e, r29	; 62
  fc:	0f be       	out	0x3f, r0	; 63
  fe:	cd bf       	out	0x3d, r28	; 61
 100:	8e 83       	std	Y+6, r24	; 0x06
 102:	78 87       	std	Y+8, r23	; 0x08
 104:	6f 83       	std	Y+7, r22	; 0x07
	u32 Local_counter=0;
 106:	1a 82       	std	Y+2, r1	; 0x02
 108:	1b 82       	std	Y+3, r1	; 0x03
 10a:	1c 82       	std	Y+4, r1	; 0x04
 10c:	1d 82       	std	Y+5, r1	; 0x05
	u8 Local_ErrorState=ok;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	89 83       	std	Y+1, r24	; 0x01
	//if ADC not busy
	if (ADC_BUSY_STATE == IDLE)
 112:	80 91 64 00 	lds	r24, 0x0064
 116:	88 23       	and	r24, r24
 118:	09 f0       	breq	.+2      	; 0x11c <ADC_SYNC_StartConversion+0x30>
 11a:	5a c0       	rjmp	.+180    	; 0x1d0 <ADC_SYNC_StartConversion+0xe4>
	{
		//make the busy state told me that now i'm busy
		ADC_BUSY_STATE = BUSY;
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	80 93 64 00 	sts	0x0064, r24
		//clear the mux bits in ADMUX register
		ADMUX &=0b11100000;
 122:	a7 e2       	ldi	r26, 0x27	; 39
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e7 e2       	ldi	r30, 0x27	; 39
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 7e       	andi	r24, 0xE0	; 224
 12e:	8c 93       	st	X, r24

		//set the required channel into mux bits
		ADMUX |= Copy_u8Channel;
 130:	a7 e2       	ldi	r26, 0x27	; 39
 132:	b0 e0       	ldi	r27, 0x00	; 0
 134:	e7 e2       	ldi	r30, 0x27	; 39
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	90 81       	ld	r25, Z
 13a:	8e 81       	ldd	r24, Y+6	; 0x06
 13c:	89 2b       	or	r24, r25
 13e:	8c 93       	st	X, r24

		//start conversion
		SET_BIT(ADCSRA,ADCSRA_ADSC);
 140:	a6 e2       	ldi	r26, 0x26	; 38
 142:	b0 e0       	ldi	r27, 0x00	; 0
 144:	e6 e2       	ldi	r30, 0x26	; 38
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	80 64       	ori	r24, 0x40	; 64
 14c:	8c 93       	st	X, r24
 14e:	0b c0       	rjmp	.+22     	; 0x166 <ADC_SYNC_StartConversion+0x7a>
		/*polling (busy waiting)until the conversion complete flag is set or
		 * the counter reaches the time out value set in register file
		 * */
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_counter != ADC_TIMEOUT))
		{
			Local_counter++;
 150:	8a 81       	ldd	r24, Y+2	; 0x02
 152:	9b 81       	ldd	r25, Y+3	; 0x03
 154:	ac 81       	ldd	r26, Y+4	; 0x04
 156:	bd 81       	ldd	r27, Y+5	; 0x05
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	a1 1d       	adc	r26, r1
 15c:	b1 1d       	adc	r27, r1
 15e:	8a 83       	std	Y+2, r24	; 0x02
 160:	9b 83       	std	Y+3, r25	; 0x03
 162:	ac 83       	std	Y+4, r26	; 0x04
 164:	bd 83       	std	Y+5, r27	; 0x05
		SET_BIT(ADCSRA,ADCSRA_ADSC);

		/*polling (busy waiting)until the conversion complete flag is set or
		 * the counter reaches the time out value set in register file
		 * */
		while(((GET_BIT(ADCSRA,ADCSRA_ADIF))==0) && (Local_counter != ADC_TIMEOUT))
 166:	e6 e2       	ldi	r30, 0x26	; 38
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	82 95       	swap	r24
 16e:	8f 70       	andi	r24, 0x0F	; 15
 170:	88 2f       	mov	r24, r24
 172:	90 e0       	ldi	r25, 0x00	; 0
 174:	81 70       	andi	r24, 0x01	; 1
 176:	90 70       	andi	r25, 0x00	; 0
 178:	00 97       	sbiw	r24, 0x00	; 0
 17a:	61 f4       	brne	.+24     	; 0x194 <ADC_SYNC_StartConversion+0xa8>
 17c:	8a 81       	ldd	r24, Y+2	; 0x02
 17e:	9b 81       	ldd	r25, Y+3	; 0x03
 180:	ac 81       	ldd	r26, Y+4	; 0x04
 182:	bd 81       	ldd	r27, Y+5	; 0x05
 184:	80 35       	cpi	r24, 0x50	; 80
 186:	23 ec       	ldi	r18, 0xC3	; 195
 188:	92 07       	cpc	r25, r18
 18a:	20 e0       	ldi	r18, 0x00	; 0
 18c:	a2 07       	cpc	r26, r18
 18e:	20 e0       	ldi	r18, 0x00	; 0
 190:	b2 07       	cpc	r27, r18
 192:	f1 f6       	brne	.-68     	; 0x150 <ADC_SYNC_StartConversion+0x64>
		{
			Local_counter++;
		}
		if(Local_counter == ADC_TIMEOUT)
 194:	8a 81       	ldd	r24, Y+2	; 0x02
 196:	9b 81       	ldd	r25, Y+3	; 0x03
 198:	ac 81       	ldd	r26, Y+4	; 0x04
 19a:	bd 81       	ldd	r27, Y+5	; 0x05
 19c:	80 35       	cpi	r24, 0x50	; 80
 19e:	23 ec       	ldi	r18, 0xC3	; 195
 1a0:	92 07       	cpc	r25, r18
 1a2:	20 e0       	ldi	r18, 0x00	; 0
 1a4:	a2 07       	cpc	r26, r18
 1a6:	20 e0       	ldi	r18, 0x00	; 0
 1a8:	b2 07       	cpc	r27, r18
 1aa:	11 f4       	brne	.+4      	; 0x1b0 <ADC_SYNC_StartConversion+0xc4>
		{
			//loop was broken because the time out has reached
			Local_ErrorState=Nok;
 1ac:	19 82       	std	Y+1, r1	; 0x01
 1ae:	12 c0       	rjmp	.+36     	; 0x1d4 <ADC_SYNC_StartConversion+0xe8>
		else
		{
			//clear the conversion complete flag
			/*i will make the flag down by my self because i'm using polling
			 * but if we use interrupt it will be down by it self--no need for this step*/
			SET_BIT(ADCSRA,ADCSRA_ADIF);
 1b0:	a6 e2       	ldi	r26, 0x26	; 38
 1b2:	b0 e0       	ldi	r27, 0x00	; 0
 1b4:	e6 e2       	ldi	r30, 0x26	; 38
 1b6:	f0 e0       	ldi	r31, 0x00	; 0
 1b8:	80 81       	ld	r24, Z
 1ba:	80 61       	ori	r24, 0x10	; 16
 1bc:	8c 93       	st	X, r24

			//Return the reading (Left adjust using 8 bits )== Look at last part in register.h
			*ADC_u8_Reading=ADCH;
 1be:	e5 e2       	ldi	r30, 0x25	; 37
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	ef 81       	ldd	r30, Y+7	; 0x07
 1c6:	f8 85       	ldd	r31, Y+8	; 0x08
 1c8:	80 83       	st	Z, r24
			//make the busy state Not busy back to be able to make new conversion
			ADC_BUSY_STATE = IDLE;
 1ca:	10 92 64 00 	sts	0x0064, r1
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <ADC_SYNC_StartConversion+0xe8>
		}
	}
	else
	{
		Local_ErrorState = PLEASE_ADC_IS_BUSY;
 1d0:	82 e0       	ldi	r24, 0x02	; 2
 1d2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;
 1d4:	89 81       	ldd	r24, Y+1	; 0x01
}
 1d6:	28 96       	adiw	r28, 0x08	; 8
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	f8 94       	cli
 1dc:	de bf       	out	0x3e, r29	; 62
 1de:	0f be       	out	0x3f, r0	; 63
 1e0:	cd bf       	out	0x3d, r28	; 61
 1e2:	cf 91       	pop	r28
 1e4:	df 91       	pop	r29
 1e6:	08 95       	ret

000001e8 <ADC_ASYNC_StartConversion>:

u8  ADC_ASYNC_StartConversion(u8 Copy_u8Channel, u8* Copy_u8_Reading,void (*Copy_Pointer_CallBack_Notification_Func)(void))
{
 1e8:	df 93       	push	r29
 1ea:	cf 93       	push	r28
 1ec:	00 d0       	rcall	.+0      	; 0x1ee <ADC_ASYNC_StartConversion+0x6>
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <ADC_ASYNC_StartConversion+0x8>
 1f0:	00 d0       	rcall	.+0      	; 0x1f2 <ADC_ASYNC_StartConversion+0xa>
 1f2:	cd b7       	in	r28, 0x3d	; 61
 1f4:	de b7       	in	r29, 0x3e	; 62
 1f6:	8a 83       	std	Y+2, r24	; 0x02
 1f8:	7c 83       	std	Y+4, r23	; 0x04
 1fa:	6b 83       	std	Y+3, r22	; 0x03
 1fc:	5e 83       	std	Y+6, r21	; 0x06
 1fe:	4d 83       	std	Y+5, r20	; 0x05
	u8 Local_ErrorState=ok;
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	89 83       	std	Y+1, r24	; 0x01

	//if ADC not busy
	if (ADC_BUSY_STATE == IDLE)
 204:	80 91 64 00 	lds	r24, 0x0064
 208:	88 23       	and	r24, r24
 20a:	b9 f5       	brne	.+110    	; 0x27a <ADC_ASYNC_StartConversion+0x92>
	{
		if((Copy_u8_Reading == NULL) || (Copy_Pointer_CallBack_Notification_Func == NULL))
 20c:	8b 81       	ldd	r24, Y+3	; 0x03
 20e:	9c 81       	ldd	r25, Y+4	; 0x04
 210:	00 97       	sbiw	r24, 0x00	; 0
 212:	21 f0       	breq	.+8      	; 0x21c <ADC_ASYNC_StartConversion+0x34>
 214:	8d 81       	ldd	r24, Y+5	; 0x05
 216:	9e 81       	ldd	r25, Y+6	; 0x06
 218:	00 97       	sbiw	r24, 0x00	; 0
 21a:	11 f4       	brne	.+4      	; 0x220 <ADC_ASYNC_StartConversion+0x38>
		{
			Local_ErrorState = NULL_POINTER;
 21c:	19 82       	std	Y+1, r1	; 0x01
 21e:	2f c0       	rjmp	.+94     	; 0x27e <ADC_ASYNC_StartConversion+0x96>
		}

		else
		{
			//make the busy state told me that now i'm busy
			ADC_BUSY_STATE = BUSY;
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	80 93 64 00 	sts	0x0064, r24
			//initialize reading variable
			ADC_u8_Reading = Copy_u8_Reading;
 226:	8b 81       	ldd	r24, Y+3	; 0x03
 228:	9c 81       	ldd	r25, Y+4	; 0x04
 22a:	90 93 61 00 	sts	0x0061, r25
 22e:	80 93 60 00 	sts	0x0060, r24

			ADC_Pointer_CallBack_Notification_Func =Copy_Pointer_CallBack_Notification_Func;
 232:	8d 81       	ldd	r24, Y+5	; 0x05
 234:	9e 81       	ldd	r25, Y+6	; 0x06
 236:	90 93 63 00 	sts	0x0063, r25
 23a:	80 93 62 00 	sts	0x0062, r24

			//clear the mux bits in ADMUX register
			ADMUX &=0b11100000;
 23e:	a7 e2       	ldi	r26, 0x27	; 39
 240:	b0 e0       	ldi	r27, 0x00	; 0
 242:	e7 e2       	ldi	r30, 0x27	; 39
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	80 81       	ld	r24, Z
 248:	80 7e       	andi	r24, 0xE0	; 224
 24a:	8c 93       	st	X, r24

			//set the required channel into mux bits
			ADMUX |= Copy_u8Channel;
 24c:	a7 e2       	ldi	r26, 0x27	; 39
 24e:	b0 e0       	ldi	r27, 0x00	; 0
 250:	e7 e2       	ldi	r30, 0x27	; 39
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	90 81       	ld	r25, Z
 256:	8a 81       	ldd	r24, Y+2	; 0x02
 258:	89 2b       	or	r24, r25
 25a:	8c 93       	st	X, r24

			//start conversion
			SET_BIT(ADCSRA,ADCSRA_ADSC);
 25c:	a6 e2       	ldi	r26, 0x26	; 38
 25e:	b0 e0       	ldi	r27, 0x00	; 0
 260:	e6 e2       	ldi	r30, 0x26	; 38
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	80 64       	ori	r24, 0x40	; 64
 268:	8c 93       	st	X, r24
			//ADC interrupt enable
			SET_BIT(ADCSRA,ADCSRA_ADIE);
 26a:	a6 e2       	ldi	r26, 0x26	; 38
 26c:	b0 e0       	ldi	r27, 0x00	; 0
 26e:	e6 e2       	ldi	r30, 0x26	; 38
 270:	f0 e0       	ldi	r31, 0x00	; 0
 272:	80 81       	ld	r24, Z
 274:	88 60       	ori	r24, 0x08	; 8
 276:	8c 93       	st	X, r24
 278:	02 c0       	rjmp	.+4      	; 0x27e <ADC_ASYNC_StartConversion+0x96>
		}
	}
	else
	{
		Local_ErrorState = PLEASE_ADC_IS_BUSY;
 27a:	82 e0       	ldi	r24, 0x02	; 2
 27c:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_ErrorState;;
 27e:	89 81       	ldd	r24, Y+1	; 0x01
}
 280:	26 96       	adiw	r28, 0x06	; 6
 282:	0f b6       	in	r0, 0x3f	; 63
 284:	f8 94       	cli
 286:	de bf       	out	0x3e, r29	; 62
 288:	0f be       	out	0x3f, r0	; 63
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	cf 91       	pop	r28
 28e:	df 91       	pop	r29
 290:	08 95       	ret

00000292 <__vect_16>:

void __vect_16 (void)  __attribute__((signal));
void __vect_16 (void)
{
 292:	1f 92       	push	r1
 294:	0f 92       	push	r0
 296:	0f b6       	in	r0, 0x3f	; 63
 298:	0f 92       	push	r0
 29a:	11 24       	eor	r1, r1
 29c:	2f 93       	push	r18
 29e:	3f 93       	push	r19
 2a0:	4f 93       	push	r20
 2a2:	5f 93       	push	r21
 2a4:	6f 93       	push	r22
 2a6:	7f 93       	push	r23
 2a8:	8f 93       	push	r24
 2aa:	9f 93       	push	r25
 2ac:	af 93       	push	r26
 2ae:	bf 93       	push	r27
 2b0:	ef 93       	push	r30
 2b2:	ff 93       	push	r31
 2b4:	df 93       	push	r29
 2b6:	cf 93       	push	r28
 2b8:	cd b7       	in	r28, 0x3d	; 61
 2ba:	de b7       	in	r29, 0x3e	; 62
	/*read ADC result which saved in the address of global variable
	 * then put it into 8 bit ADCH register by dererencing it's pointer
	 * and equaling it,s value to register (ADCH)
	 * */
	*ADC_u8_Reading =ADCH;
 2bc:	a0 91 60 00 	lds	r26, 0x0060
 2c0:	b0 91 61 00 	lds	r27, 0x0061
 2c4:	e5 e2       	ldi	r30, 0x25	; 37
 2c6:	f0 e0       	ldi	r31, 0x00	; 0
 2c8:	80 81       	ld	r24, Z
 2ca:	8c 93       	st	X, r24

	//make the busy state Not busy back to be able to make new conversion
	ADC_BUSY_STATE = IDLE;
 2cc:	10 92 64 00 	sts	0x0064, r1

	/*invoke the call back notification function told me the conversion has
	 * completed */
	ADC_Pointer_CallBack_Notification_Func();
 2d0:	e0 91 62 00 	lds	r30, 0x0062
 2d4:	f0 91 63 00 	lds	r31, 0x0063
 2d8:	09 95       	icall

	//disable ADC interrupt
	CLR_BIT(ADCSRA,ADCSRA_ADIE);
 2da:	a6 e2       	ldi	r26, 0x26	; 38
 2dc:	b0 e0       	ldi	r27, 0x00	; 0
 2de:	e6 e2       	ldi	r30, 0x26	; 38
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
 2e2:	80 81       	ld	r24, Z
 2e4:	87 7f       	andi	r24, 0xF7	; 247
 2e6:	8c 93       	st	X, r24

	/*Here no need to clear the flag because the interrupt down the flag automatically*/
}
 2e8:	cf 91       	pop	r28
 2ea:	df 91       	pop	r29
 2ec:	ff 91       	pop	r31
 2ee:	ef 91       	pop	r30
 2f0:	bf 91       	pop	r27
 2f2:	af 91       	pop	r26
 2f4:	9f 91       	pop	r25
 2f6:	8f 91       	pop	r24
 2f8:	7f 91       	pop	r23
 2fa:	6f 91       	pop	r22
 2fc:	5f 91       	pop	r21
 2fe:	4f 91       	pop	r20
 300:	3f 91       	pop	r19
 302:	2f 91       	pop	r18
 304:	0f 90       	pop	r0
 306:	0f be       	out	0x3f, r0	; 63
 308:	0f 90       	pop	r0
 30a:	1f 90       	pop	r1
 30c:	18 95       	reti

0000030e <DIO_SetPinValue>:
#include "DIO_int.h"
#include "DIO_priv.h"

/* IO Pins */
extern void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
 30e:	df 93       	push	r29
 310:	cf 93       	push	r28
 312:	cd b7       	in	r28, 0x3d	; 61
 314:	de b7       	in	r29, 0x3e	; 62
 316:	27 97       	sbiw	r28, 0x07	; 7
 318:	0f b6       	in	r0, 0x3f	; 63
 31a:	f8 94       	cli
 31c:	de bf       	out	0x3e, r29	; 62
 31e:	0f be       	out	0x3f, r0	; 63
 320:	cd bf       	out	0x3d, r28	; 61
 322:	89 83       	std	Y+1, r24	; 0x01
 324:	6a 83       	std	Y+2, r22	; 0x02
 326:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= DIO_PORTD) && (u8PinIdCopy <= DIO_PIN7))
 328:	89 81       	ldd	r24, Y+1	; 0x01
 32a:	84 30       	cpi	r24, 0x04	; 4
 32c:	08 f0       	brcs	.+2      	; 0x330 <DIO_SetPinValue+0x22>
 32e:	ee c0       	rjmp	.+476    	; 0x50c <__stack+0xad>
 330:	8a 81       	ldd	r24, Y+2	; 0x02
 332:	88 30       	cpi	r24, 0x08	; 8
 334:	08 f0       	brcs	.+2      	; 0x338 <DIO_SetPinValue+0x2a>
 336:	ea c0       	rjmp	.+468    	; 0x50c <__stack+0xad>
	{
		if (u8PinValCopy == DIO_HIGH)
 338:	8b 81       	ldd	r24, Y+3	; 0x03
 33a:	81 30       	cpi	r24, 0x01	; 1
 33c:	09 f0       	breq	.+2      	; 0x340 <DIO_SetPinValue+0x32>
 33e:	6f c0       	rjmp	.+222    	; 0x41e <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 340:	89 81       	ldd	r24, Y+1	; 0x01
 342:	28 2f       	mov	r18, r24
 344:	30 e0       	ldi	r19, 0x00	; 0
 346:	3f 83       	std	Y+7, r19	; 0x07
 348:	2e 83       	std	Y+6, r18	; 0x06
 34a:	8e 81       	ldd	r24, Y+6	; 0x06
 34c:	9f 81       	ldd	r25, Y+7	; 0x07
 34e:	81 30       	cpi	r24, 0x01	; 1
 350:	91 05       	cpc	r25, r1
 352:	49 f1       	breq	.+82     	; 0x3a6 <DIO_SetPinValue+0x98>
 354:	2e 81       	ldd	r18, Y+6	; 0x06
 356:	3f 81       	ldd	r19, Y+7	; 0x07
 358:	22 30       	cpi	r18, 0x02	; 2
 35a:	31 05       	cpc	r19, r1
 35c:	2c f4       	brge	.+10     	; 0x368 <DIO_SetPinValue+0x5a>
 35e:	8e 81       	ldd	r24, Y+6	; 0x06
 360:	9f 81       	ldd	r25, Y+7	; 0x07
 362:	00 97       	sbiw	r24, 0x00	; 0
 364:	61 f0       	breq	.+24     	; 0x37e <DIO_SetPinValue+0x70>
 366:	d2 c0       	rjmp	.+420    	; 0x50c <__stack+0xad>
 368:	2e 81       	ldd	r18, Y+6	; 0x06
 36a:	3f 81       	ldd	r19, Y+7	; 0x07
 36c:	22 30       	cpi	r18, 0x02	; 2
 36e:	31 05       	cpc	r19, r1
 370:	71 f1       	breq	.+92     	; 0x3ce <DIO_SetPinValue+0xc0>
 372:	8e 81       	ldd	r24, Y+6	; 0x06
 374:	9f 81       	ldd	r25, Y+7	; 0x07
 376:	83 30       	cpi	r24, 0x03	; 3
 378:	91 05       	cpc	r25, r1
 37a:	e9 f1       	breq	.+122    	; 0x3f6 <DIO_SetPinValue+0xe8>
 37c:	c7 c0       	rjmp	.+398    	; 0x50c <__stack+0xad>
			{
				case DIO_PORTA: SET_BIT(DIO_u8PORTA_REG,u8PinIdCopy); break;
 37e:	ab e3       	ldi	r26, 0x3B	; 59
 380:	b0 e0       	ldi	r27, 0x00	; 0
 382:	eb e3       	ldi	r30, 0x3B	; 59
 384:	f0 e0       	ldi	r31, 0x00	; 0
 386:	80 81       	ld	r24, Z
 388:	48 2f       	mov	r20, r24
 38a:	8a 81       	ldd	r24, Y+2	; 0x02
 38c:	28 2f       	mov	r18, r24
 38e:	30 e0       	ldi	r19, 0x00	; 0
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	02 2e       	mov	r0, r18
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_SetPinValue+0x8e>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	0a 94       	dec	r0
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_SetPinValue+0x8a>
 3a0:	84 2b       	or	r24, r20
 3a2:	8c 93       	st	X, r24
 3a4:	b3 c0       	rjmp	.+358    	; 0x50c <__stack+0xad>
				case DIO_PORTB: SET_BIT(DIO_u8PORTB_REG,u8PinIdCopy); break;
 3a6:	a8 e3       	ldi	r26, 0x38	; 56
 3a8:	b0 e0       	ldi	r27, 0x00	; 0
 3aa:	e8 e3       	ldi	r30, 0x38	; 56
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	80 81       	ld	r24, Z
 3b0:	48 2f       	mov	r20, r24
 3b2:	8a 81       	ldd	r24, Y+2	; 0x02
 3b4:	28 2f       	mov	r18, r24
 3b6:	30 e0       	ldi	r19, 0x00	; 0
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	90 e0       	ldi	r25, 0x00	; 0
 3bc:	02 2e       	mov	r0, r18
 3be:	02 c0       	rjmp	.+4      	; 0x3c4 <DIO_SetPinValue+0xb6>
 3c0:	88 0f       	add	r24, r24
 3c2:	99 1f       	adc	r25, r25
 3c4:	0a 94       	dec	r0
 3c6:	e2 f7       	brpl	.-8      	; 0x3c0 <DIO_SetPinValue+0xb2>
 3c8:	84 2b       	or	r24, r20
 3ca:	8c 93       	st	X, r24
 3cc:	9f c0       	rjmp	.+318    	; 0x50c <__stack+0xad>
				case DIO_PORTC: SET_BIT(DIO_u8PORTC_REG,u8PinIdCopy); break;
 3ce:	a5 e3       	ldi	r26, 0x35	; 53
 3d0:	b0 e0       	ldi	r27, 0x00	; 0
 3d2:	e5 e3       	ldi	r30, 0x35	; 53
 3d4:	f0 e0       	ldi	r31, 0x00	; 0
 3d6:	80 81       	ld	r24, Z
 3d8:	48 2f       	mov	r20, r24
 3da:	8a 81       	ldd	r24, Y+2	; 0x02
 3dc:	28 2f       	mov	r18, r24
 3de:	30 e0       	ldi	r19, 0x00	; 0
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	90 e0       	ldi	r25, 0x00	; 0
 3e4:	02 2e       	mov	r0, r18
 3e6:	02 c0       	rjmp	.+4      	; 0x3ec <DIO_SetPinValue+0xde>
 3e8:	88 0f       	add	r24, r24
 3ea:	99 1f       	adc	r25, r25
 3ec:	0a 94       	dec	r0
 3ee:	e2 f7       	brpl	.-8      	; 0x3e8 <DIO_SetPinValue+0xda>
 3f0:	84 2b       	or	r24, r20
 3f2:	8c 93       	st	X, r24
 3f4:	8b c0       	rjmp	.+278    	; 0x50c <__stack+0xad>
				case DIO_PORTD: SET_BIT(DIO_u8PORTD_REG,u8PinIdCopy); break;
 3f6:	a2 e3       	ldi	r26, 0x32	; 50
 3f8:	b0 e0       	ldi	r27, 0x00	; 0
 3fa:	e2 e3       	ldi	r30, 0x32	; 50
 3fc:	f0 e0       	ldi	r31, 0x00	; 0
 3fe:	80 81       	ld	r24, Z
 400:	48 2f       	mov	r20, r24
 402:	8a 81       	ldd	r24, Y+2	; 0x02
 404:	28 2f       	mov	r18, r24
 406:	30 e0       	ldi	r19, 0x00	; 0
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	02 2e       	mov	r0, r18
 40e:	02 c0       	rjmp	.+4      	; 0x414 <DIO_SetPinValue+0x106>
 410:	88 0f       	add	r24, r24
 412:	99 1f       	adc	r25, r25
 414:	0a 94       	dec	r0
 416:	e2 f7       	brpl	.-8      	; 0x410 <DIO_SetPinValue+0x102>
 418:	84 2b       	or	r24, r20
 41a:	8c 93       	st	X, r24
 41c:	77 c0       	rjmp	.+238    	; 0x50c <__stack+0xad>
			}

		}

		else if (u8PinValCopy == DIO_LOW)
 41e:	8b 81       	ldd	r24, Y+3	; 0x03
 420:	88 23       	and	r24, r24
 422:	09 f0       	breq	.+2      	; 0x426 <DIO_SetPinValue+0x118>
 424:	73 c0       	rjmp	.+230    	; 0x50c <__stack+0xad>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 426:	89 81       	ldd	r24, Y+1	; 0x01
 428:	28 2f       	mov	r18, r24
 42a:	30 e0       	ldi	r19, 0x00	; 0
 42c:	3d 83       	std	Y+5, r19	; 0x05
 42e:	2c 83       	std	Y+4, r18	; 0x04
 430:	8c 81       	ldd	r24, Y+4	; 0x04
 432:	9d 81       	ldd	r25, Y+5	; 0x05
 434:	81 30       	cpi	r24, 0x01	; 1
 436:	91 05       	cpc	r25, r1
 438:	59 f1       	breq	.+86     	; 0x490 <__stack+0x31>
 43a:	2c 81       	ldd	r18, Y+4	; 0x04
 43c:	3d 81       	ldd	r19, Y+5	; 0x05
 43e:	22 30       	cpi	r18, 0x02	; 2
 440:	31 05       	cpc	r19, r1
 442:	2c f4       	brge	.+10     	; 0x44e <DIO_SetPinValue+0x140>
 444:	8c 81       	ldd	r24, Y+4	; 0x04
 446:	9d 81       	ldd	r25, Y+5	; 0x05
 448:	00 97       	sbiw	r24, 0x00	; 0
 44a:	69 f0       	breq	.+26     	; 0x466 <__stack+0x7>
 44c:	5f c0       	rjmp	.+190    	; 0x50c <__stack+0xad>
 44e:	2c 81       	ldd	r18, Y+4	; 0x04
 450:	3d 81       	ldd	r19, Y+5	; 0x05
 452:	22 30       	cpi	r18, 0x02	; 2
 454:	31 05       	cpc	r19, r1
 456:	89 f1       	breq	.+98     	; 0x4ba <__stack+0x5b>
 458:	8c 81       	ldd	r24, Y+4	; 0x04
 45a:	9d 81       	ldd	r25, Y+5	; 0x05
 45c:	83 30       	cpi	r24, 0x03	; 3
 45e:	91 05       	cpc	r25, r1
 460:	09 f4       	brne	.+2      	; 0x464 <__stack+0x5>
 462:	40 c0       	rjmp	.+128    	; 0x4e4 <__stack+0x85>
 464:	53 c0       	rjmp	.+166    	; 0x50c <__stack+0xad>
			{
				case DIO_PORTA: CLR_BIT(DIO_u8PORTA_REG,u8PinIdCopy); break;
 466:	ab e3       	ldi	r26, 0x3B	; 59
 468:	b0 e0       	ldi	r27, 0x00	; 0
 46a:	eb e3       	ldi	r30, 0x3B	; 59
 46c:	f0 e0       	ldi	r31, 0x00	; 0
 46e:	80 81       	ld	r24, Z
 470:	48 2f       	mov	r20, r24
 472:	8a 81       	ldd	r24, Y+2	; 0x02
 474:	28 2f       	mov	r18, r24
 476:	30 e0       	ldi	r19, 0x00	; 0
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	02 2e       	mov	r0, r18
 47e:	02 c0       	rjmp	.+4      	; 0x484 <__stack+0x25>
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	0a 94       	dec	r0
 486:	e2 f7       	brpl	.-8      	; 0x480 <__stack+0x21>
 488:	80 95       	com	r24
 48a:	84 23       	and	r24, r20
 48c:	8c 93       	st	X, r24
 48e:	3e c0       	rjmp	.+124    	; 0x50c <__stack+0xad>
				case DIO_PORTB: CLR_BIT(DIO_u8PORTB_REG,u8PinIdCopy); break;
 490:	a8 e3       	ldi	r26, 0x38	; 56
 492:	b0 e0       	ldi	r27, 0x00	; 0
 494:	e8 e3       	ldi	r30, 0x38	; 56
 496:	f0 e0       	ldi	r31, 0x00	; 0
 498:	80 81       	ld	r24, Z
 49a:	48 2f       	mov	r20, r24
 49c:	8a 81       	ldd	r24, Y+2	; 0x02
 49e:	28 2f       	mov	r18, r24
 4a0:	30 e0       	ldi	r19, 0x00	; 0
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	02 2e       	mov	r0, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__stack+0x4f>
 4aa:	88 0f       	add	r24, r24
 4ac:	99 1f       	adc	r25, r25
 4ae:	0a 94       	dec	r0
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <__stack+0x4b>
 4b2:	80 95       	com	r24
 4b4:	84 23       	and	r24, r20
 4b6:	8c 93       	st	X, r24
 4b8:	29 c0       	rjmp	.+82     	; 0x50c <__stack+0xad>
				case DIO_PORTC: CLR_BIT(DIO_u8PORTC_REG,u8PinIdCopy); break;
 4ba:	a5 e3       	ldi	r26, 0x35	; 53
 4bc:	b0 e0       	ldi	r27, 0x00	; 0
 4be:	e5 e3       	ldi	r30, 0x35	; 53
 4c0:	f0 e0       	ldi	r31, 0x00	; 0
 4c2:	80 81       	ld	r24, Z
 4c4:	48 2f       	mov	r20, r24
 4c6:	8a 81       	ldd	r24, Y+2	; 0x02
 4c8:	28 2f       	mov	r18, r24
 4ca:	30 e0       	ldi	r19, 0x00	; 0
 4cc:	81 e0       	ldi	r24, 0x01	; 1
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	02 2e       	mov	r0, r18
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <__stack+0x79>
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	0a 94       	dec	r0
 4da:	e2 f7       	brpl	.-8      	; 0x4d4 <__stack+0x75>
 4dc:	80 95       	com	r24
 4de:	84 23       	and	r24, r20
 4e0:	8c 93       	st	X, r24
 4e2:	14 c0       	rjmp	.+40     	; 0x50c <__stack+0xad>
				case DIO_PORTD: CLR_BIT(DIO_u8PORTD_REG,u8PinIdCopy); break;
 4e4:	a2 e3       	ldi	r26, 0x32	; 50
 4e6:	b0 e0       	ldi	r27, 0x00	; 0
 4e8:	e2 e3       	ldi	r30, 0x32	; 50
 4ea:	f0 e0       	ldi	r31, 0x00	; 0
 4ec:	80 81       	ld	r24, Z
 4ee:	48 2f       	mov	r20, r24
 4f0:	8a 81       	ldd	r24, Y+2	; 0x02
 4f2:	28 2f       	mov	r18, r24
 4f4:	30 e0       	ldi	r19, 0x00	; 0
 4f6:	81 e0       	ldi	r24, 0x01	; 1
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	02 2e       	mov	r0, r18
 4fc:	02 c0       	rjmp	.+4      	; 0x502 <__stack+0xa3>
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	0a 94       	dec	r0
 504:	e2 f7       	brpl	.-8      	; 0x4fe <__stack+0x9f>
 506:	80 95       	com	r24
 508:	84 23       	and	r24, r20
 50a:	8c 93       	st	X, r24

	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
 50c:	27 96       	adiw	r28, 0x07	; 7
 50e:	0f b6       	in	r0, 0x3f	; 63
 510:	f8 94       	cli
 512:	de bf       	out	0x3e, r29	; 62
 514:	0f be       	out	0x3f, r0	; 63
 516:	cd bf       	out	0x3d, r28	; 61
 518:	cf 91       	pop	r28
 51a:	df 91       	pop	r29
 51c:	08 95       	ret

0000051e <DIO_GetPinValue>:

extern u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
 51e:	df 93       	push	r29
 520:	cf 93       	push	r28
 522:	00 d0       	rcall	.+0      	; 0x524 <DIO_GetPinValue+0x6>
 524:	00 d0       	rcall	.+0      	; 0x526 <DIO_GetPinValue+0x8>
 526:	0f 92       	push	r0
 528:	cd b7       	in	r28, 0x3d	; 61
 52a:	de b7       	in	r29, 0x3e	; 62
 52c:	8a 83       	std	Y+2, r24	; 0x02
 52e:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= DIO_PORTD) && (u8PinIdCopy <= DIO_PIN7))
 530:	8a 81       	ldd	r24, Y+2	; 0x02
 532:	84 30       	cpi	r24, 0x04	; 4
 534:	08 f0       	brcs	.+2      	; 0x538 <DIO_GetPinValue+0x1a>
 536:	6c c0       	rjmp	.+216    	; 0x610 <DIO_GetPinValue+0xf2>
 538:	8b 81       	ldd	r24, Y+3	; 0x03
 53a:	88 30       	cpi	r24, 0x08	; 8
 53c:	08 f0       	brcs	.+2      	; 0x540 <DIO_GetPinValue+0x22>
 53e:	68 c0       	rjmp	.+208    	; 0x610 <DIO_GetPinValue+0xf2>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
 540:	8a 81       	ldd	r24, Y+2	; 0x02
 542:	28 2f       	mov	r18, r24
 544:	30 e0       	ldi	r19, 0x00	; 0
 546:	3d 83       	std	Y+5, r19	; 0x05
 548:	2c 83       	std	Y+4, r18	; 0x04
 54a:	4c 81       	ldd	r20, Y+4	; 0x04
 54c:	5d 81       	ldd	r21, Y+5	; 0x05
 54e:	41 30       	cpi	r20, 0x01	; 1
 550:	51 05       	cpc	r21, r1
 552:	41 f1       	breq	.+80     	; 0x5a4 <DIO_GetPinValue+0x86>
 554:	8c 81       	ldd	r24, Y+4	; 0x04
 556:	9d 81       	ldd	r25, Y+5	; 0x05
 558:	82 30       	cpi	r24, 0x02	; 2
 55a:	91 05       	cpc	r25, r1
 55c:	34 f4       	brge	.+12     	; 0x56a <DIO_GetPinValue+0x4c>
 55e:	2c 81       	ldd	r18, Y+4	; 0x04
 560:	3d 81       	ldd	r19, Y+5	; 0x05
 562:	21 15       	cp	r18, r1
 564:	31 05       	cpc	r19, r1
 566:	61 f0       	breq	.+24     	; 0x580 <DIO_GetPinValue+0x62>
 568:	55 c0       	rjmp	.+170    	; 0x614 <DIO_GetPinValue+0xf6>
 56a:	4c 81       	ldd	r20, Y+4	; 0x04
 56c:	5d 81       	ldd	r21, Y+5	; 0x05
 56e:	42 30       	cpi	r20, 0x02	; 2
 570:	51 05       	cpc	r21, r1
 572:	51 f1       	breq	.+84     	; 0x5c8 <DIO_GetPinValue+0xaa>
 574:	8c 81       	ldd	r24, Y+4	; 0x04
 576:	9d 81       	ldd	r25, Y+5	; 0x05
 578:	83 30       	cpi	r24, 0x03	; 3
 57a:	91 05       	cpc	r25, r1
 57c:	b9 f1       	breq	.+110    	; 0x5ec <DIO_GetPinValue+0xce>
 57e:	4a c0       	rjmp	.+148    	; 0x614 <DIO_GetPinValue+0xf6>
		{
			case DIO_PORTA: u8ResultLocal= GET_BIT(DIO_u8PINA_REG,u8PinIdCopy); break;
 580:	e9 e3       	ldi	r30, 0x39	; 57
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	28 2f       	mov	r18, r24
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	8b 81       	ldd	r24, Y+3	; 0x03
 58c:	88 2f       	mov	r24, r24
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	a9 01       	movw	r20, r18
 592:	02 c0       	rjmp	.+4      	; 0x598 <DIO_GetPinValue+0x7a>
 594:	55 95       	asr	r21
 596:	47 95       	ror	r20
 598:	8a 95       	dec	r24
 59a:	e2 f7       	brpl	.-8      	; 0x594 <DIO_GetPinValue+0x76>
 59c:	ca 01       	movw	r24, r20
 59e:	81 70       	andi	r24, 0x01	; 1
 5a0:	89 83       	std	Y+1, r24	; 0x01
 5a2:	38 c0       	rjmp	.+112    	; 0x614 <DIO_GetPinValue+0xf6>
			case DIO_PORTB: u8ResultLocal= GET_BIT(DIO_u8PINB_REG,u8PinIdCopy); break;
 5a4:	e6 e3       	ldi	r30, 0x36	; 54
 5a6:	f0 e0       	ldi	r31, 0x00	; 0
 5a8:	80 81       	ld	r24, Z
 5aa:	28 2f       	mov	r18, r24
 5ac:	30 e0       	ldi	r19, 0x00	; 0
 5ae:	8b 81       	ldd	r24, Y+3	; 0x03
 5b0:	88 2f       	mov	r24, r24
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	a9 01       	movw	r20, r18
 5b6:	02 c0       	rjmp	.+4      	; 0x5bc <DIO_GetPinValue+0x9e>
 5b8:	55 95       	asr	r21
 5ba:	47 95       	ror	r20
 5bc:	8a 95       	dec	r24
 5be:	e2 f7       	brpl	.-8      	; 0x5b8 <DIO_GetPinValue+0x9a>
 5c0:	ca 01       	movw	r24, r20
 5c2:	81 70       	andi	r24, 0x01	; 1
 5c4:	89 83       	std	Y+1, r24	; 0x01
 5c6:	26 c0       	rjmp	.+76     	; 0x614 <DIO_GetPinValue+0xf6>
			case DIO_PORTC: u8ResultLocal= GET_BIT(DIO_u8PINC_REG,u8PinIdCopy); break;
 5c8:	e3 e3       	ldi	r30, 0x33	; 51
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 81       	ld	r24, Z
 5ce:	28 2f       	mov	r18, r24
 5d0:	30 e0       	ldi	r19, 0x00	; 0
 5d2:	8b 81       	ldd	r24, Y+3	; 0x03
 5d4:	88 2f       	mov	r24, r24
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	a9 01       	movw	r20, r18
 5da:	02 c0       	rjmp	.+4      	; 0x5e0 <DIO_GetPinValue+0xc2>
 5dc:	55 95       	asr	r21
 5de:	47 95       	ror	r20
 5e0:	8a 95       	dec	r24
 5e2:	e2 f7       	brpl	.-8      	; 0x5dc <DIO_GetPinValue+0xbe>
 5e4:	ca 01       	movw	r24, r20
 5e6:	81 70       	andi	r24, 0x01	; 1
 5e8:	89 83       	std	Y+1, r24	; 0x01
 5ea:	14 c0       	rjmp	.+40     	; 0x614 <DIO_GetPinValue+0xf6>
			case DIO_PORTD: u8ResultLocal= GET_BIT(DIO_u8PIND_REG,u8PinIdCopy); break;
 5ec:	e0 e3       	ldi	r30, 0x30	; 48
 5ee:	f0 e0       	ldi	r31, 0x00	; 0
 5f0:	80 81       	ld	r24, Z
 5f2:	28 2f       	mov	r18, r24
 5f4:	30 e0       	ldi	r19, 0x00	; 0
 5f6:	8b 81       	ldd	r24, Y+3	; 0x03
 5f8:	88 2f       	mov	r24, r24
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	a9 01       	movw	r20, r18
 5fe:	02 c0       	rjmp	.+4      	; 0x604 <DIO_GetPinValue+0xe6>
 600:	55 95       	asr	r21
 602:	47 95       	ror	r20
 604:	8a 95       	dec	r24
 606:	e2 f7       	brpl	.-8      	; 0x600 <DIO_GetPinValue+0xe2>
 608:	ca 01       	movw	r24, r20
 60a:	81 70       	andi	r24, 0x01	; 1
 60c:	89 83       	std	Y+1, r24	; 0x01
 60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_GetPinValue+0xf6>
	}

	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
 610:	8f ef       	ldi	r24, 0xFF	; 255
 612:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ResultLocal;
 614:	89 81       	ldd	r24, Y+1	; 0x01
}
 616:	0f 90       	pop	r0
 618:	0f 90       	pop	r0
 61a:	0f 90       	pop	r0
 61c:	0f 90       	pop	r0
 61e:	0f 90       	pop	r0
 620:	cf 91       	pop	r28
 622:	df 91       	pop	r29
 624:	08 95       	ret

00000626 <DIO_SetPinDirection>:

extern void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
 626:	df 93       	push	r29
 628:	cf 93       	push	r28
 62a:	cd b7       	in	r28, 0x3d	; 61
 62c:	de b7       	in	r29, 0x3e	; 62
 62e:	27 97       	sbiw	r28, 0x07	; 7
 630:	0f b6       	in	r0, 0x3f	; 63
 632:	f8 94       	cli
 634:	de bf       	out	0x3e, r29	; 62
 636:	0f be       	out	0x3f, r0	; 63
 638:	cd bf       	out	0x3d, r28	; 61
 63a:	89 83       	std	Y+1, r24	; 0x01
 63c:	6a 83       	std	Y+2, r22	; 0x02
 63e:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= DIO_PORTD) && (u8PinIdCopy <= DIO_PIN7))
 640:	89 81       	ldd	r24, Y+1	; 0x01
 642:	84 30       	cpi	r24, 0x04	; 4
 644:	08 f0       	brcs	.+2      	; 0x648 <DIO_SetPinDirection+0x22>
 646:	ee c0       	rjmp	.+476    	; 0x824 <DIO_SetPinDirection+0x1fe>
 648:	8a 81       	ldd	r24, Y+2	; 0x02
 64a:	88 30       	cpi	r24, 0x08	; 8
 64c:	08 f0       	brcs	.+2      	; 0x650 <DIO_SetPinDirection+0x2a>
 64e:	ea c0       	rjmp	.+468    	; 0x824 <DIO_SetPinDirection+0x1fe>
	{
		if ( u8PinDirCopy == DIO_OUTPUT )
 650:	8b 81       	ldd	r24, Y+3	; 0x03
 652:	8f 3f       	cpi	r24, 0xFF	; 255
 654:	09 f0       	breq	.+2      	; 0x658 <DIO_SetPinDirection+0x32>
 656:	6f c0       	rjmp	.+222    	; 0x736 <DIO_SetPinDirection+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 658:	89 81       	ldd	r24, Y+1	; 0x01
 65a:	28 2f       	mov	r18, r24
 65c:	30 e0       	ldi	r19, 0x00	; 0
 65e:	3f 83       	std	Y+7, r19	; 0x07
 660:	2e 83       	std	Y+6, r18	; 0x06
 662:	8e 81       	ldd	r24, Y+6	; 0x06
 664:	9f 81       	ldd	r25, Y+7	; 0x07
 666:	81 30       	cpi	r24, 0x01	; 1
 668:	91 05       	cpc	r25, r1
 66a:	49 f1       	breq	.+82     	; 0x6be <DIO_SetPinDirection+0x98>
 66c:	2e 81       	ldd	r18, Y+6	; 0x06
 66e:	3f 81       	ldd	r19, Y+7	; 0x07
 670:	22 30       	cpi	r18, 0x02	; 2
 672:	31 05       	cpc	r19, r1
 674:	2c f4       	brge	.+10     	; 0x680 <DIO_SetPinDirection+0x5a>
 676:	8e 81       	ldd	r24, Y+6	; 0x06
 678:	9f 81       	ldd	r25, Y+7	; 0x07
 67a:	00 97       	sbiw	r24, 0x00	; 0
 67c:	61 f0       	breq	.+24     	; 0x696 <DIO_SetPinDirection+0x70>
 67e:	d2 c0       	rjmp	.+420    	; 0x824 <DIO_SetPinDirection+0x1fe>
 680:	2e 81       	ldd	r18, Y+6	; 0x06
 682:	3f 81       	ldd	r19, Y+7	; 0x07
 684:	22 30       	cpi	r18, 0x02	; 2
 686:	31 05       	cpc	r19, r1
 688:	71 f1       	breq	.+92     	; 0x6e6 <DIO_SetPinDirection+0xc0>
 68a:	8e 81       	ldd	r24, Y+6	; 0x06
 68c:	9f 81       	ldd	r25, Y+7	; 0x07
 68e:	83 30       	cpi	r24, 0x03	; 3
 690:	91 05       	cpc	r25, r1
 692:	e9 f1       	breq	.+122    	; 0x70e <DIO_SetPinDirection+0xe8>
 694:	c7 c0       	rjmp	.+398    	; 0x824 <DIO_SetPinDirection+0x1fe>
			{
				case DIO_PORTA: SET_BIT(DIO_u8DDRA_REG,u8PinIdCopy); break;
 696:	aa e3       	ldi	r26, 0x3A	; 58
 698:	b0 e0       	ldi	r27, 0x00	; 0
 69a:	ea e3       	ldi	r30, 0x3A	; 58
 69c:	f0 e0       	ldi	r31, 0x00	; 0
 69e:	80 81       	ld	r24, Z
 6a0:	48 2f       	mov	r20, r24
 6a2:	8a 81       	ldd	r24, Y+2	; 0x02
 6a4:	28 2f       	mov	r18, r24
 6a6:	30 e0       	ldi	r19, 0x00	; 0
 6a8:	81 e0       	ldi	r24, 0x01	; 1
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	02 2e       	mov	r0, r18
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_SetPinDirection+0x8e>
 6b0:	88 0f       	add	r24, r24
 6b2:	99 1f       	adc	r25, r25
 6b4:	0a 94       	dec	r0
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_SetPinDirection+0x8a>
 6b8:	84 2b       	or	r24, r20
 6ba:	8c 93       	st	X, r24
 6bc:	b3 c0       	rjmp	.+358    	; 0x824 <DIO_SetPinDirection+0x1fe>
				case DIO_PORTB: SET_BIT(DIO_u8DDRB_REG,u8PinIdCopy); break;
 6be:	a7 e3       	ldi	r26, 0x37	; 55
 6c0:	b0 e0       	ldi	r27, 0x00	; 0
 6c2:	e7 e3       	ldi	r30, 0x37	; 55
 6c4:	f0 e0       	ldi	r31, 0x00	; 0
 6c6:	80 81       	ld	r24, Z
 6c8:	48 2f       	mov	r20, r24
 6ca:	8a 81       	ldd	r24, Y+2	; 0x02
 6cc:	28 2f       	mov	r18, r24
 6ce:	30 e0       	ldi	r19, 0x00	; 0
 6d0:	81 e0       	ldi	r24, 0x01	; 1
 6d2:	90 e0       	ldi	r25, 0x00	; 0
 6d4:	02 2e       	mov	r0, r18
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <DIO_SetPinDirection+0xb6>
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	0a 94       	dec	r0
 6de:	e2 f7       	brpl	.-8      	; 0x6d8 <DIO_SetPinDirection+0xb2>
 6e0:	84 2b       	or	r24, r20
 6e2:	8c 93       	st	X, r24
 6e4:	9f c0       	rjmp	.+318    	; 0x824 <DIO_SetPinDirection+0x1fe>
				case DIO_PORTC: SET_BIT(DIO_u8DDRC_REG,u8PinIdCopy); break;
 6e6:	a4 e3       	ldi	r26, 0x34	; 52
 6e8:	b0 e0       	ldi	r27, 0x00	; 0
 6ea:	e4 e3       	ldi	r30, 0x34	; 52
 6ec:	f0 e0       	ldi	r31, 0x00	; 0
 6ee:	80 81       	ld	r24, Z
 6f0:	48 2f       	mov	r20, r24
 6f2:	8a 81       	ldd	r24, Y+2	; 0x02
 6f4:	28 2f       	mov	r18, r24
 6f6:	30 e0       	ldi	r19, 0x00	; 0
 6f8:	81 e0       	ldi	r24, 0x01	; 1
 6fa:	90 e0       	ldi	r25, 0x00	; 0
 6fc:	02 2e       	mov	r0, r18
 6fe:	02 c0       	rjmp	.+4      	; 0x704 <DIO_SetPinDirection+0xde>
 700:	88 0f       	add	r24, r24
 702:	99 1f       	adc	r25, r25
 704:	0a 94       	dec	r0
 706:	e2 f7       	brpl	.-8      	; 0x700 <DIO_SetPinDirection+0xda>
 708:	84 2b       	or	r24, r20
 70a:	8c 93       	st	X, r24
 70c:	8b c0       	rjmp	.+278    	; 0x824 <DIO_SetPinDirection+0x1fe>
				case DIO_PORTD: SET_BIT(DIO_u8DDRD_REG,u8PinIdCopy); break;
 70e:	a1 e3       	ldi	r26, 0x31	; 49
 710:	b0 e0       	ldi	r27, 0x00	; 0
 712:	e1 e3       	ldi	r30, 0x31	; 49
 714:	f0 e0       	ldi	r31, 0x00	; 0
 716:	80 81       	ld	r24, Z
 718:	48 2f       	mov	r20, r24
 71a:	8a 81       	ldd	r24, Y+2	; 0x02
 71c:	28 2f       	mov	r18, r24
 71e:	30 e0       	ldi	r19, 0x00	; 0
 720:	81 e0       	ldi	r24, 0x01	; 1
 722:	90 e0       	ldi	r25, 0x00	; 0
 724:	02 2e       	mov	r0, r18
 726:	02 c0       	rjmp	.+4      	; 0x72c <DIO_SetPinDirection+0x106>
 728:	88 0f       	add	r24, r24
 72a:	99 1f       	adc	r25, r25
 72c:	0a 94       	dec	r0
 72e:	e2 f7       	brpl	.-8      	; 0x728 <DIO_SetPinDirection+0x102>
 730:	84 2b       	or	r24, r20
 732:	8c 93       	st	X, r24
 734:	77 c0       	rjmp	.+238    	; 0x824 <DIO_SetPinDirection+0x1fe>
			}
		}

		else if ( u8PinDirCopy == DIO_INPUT )
 736:	8b 81       	ldd	r24, Y+3	; 0x03
 738:	88 23       	and	r24, r24
 73a:	09 f0       	breq	.+2      	; 0x73e <DIO_SetPinDirection+0x118>
 73c:	73 c0       	rjmp	.+230    	; 0x824 <DIO_SetPinDirection+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 73e:	89 81       	ldd	r24, Y+1	; 0x01
 740:	28 2f       	mov	r18, r24
 742:	30 e0       	ldi	r19, 0x00	; 0
 744:	3d 83       	std	Y+5, r19	; 0x05
 746:	2c 83       	std	Y+4, r18	; 0x04
 748:	8c 81       	ldd	r24, Y+4	; 0x04
 74a:	9d 81       	ldd	r25, Y+5	; 0x05
 74c:	81 30       	cpi	r24, 0x01	; 1
 74e:	91 05       	cpc	r25, r1
 750:	59 f1       	breq	.+86     	; 0x7a8 <DIO_SetPinDirection+0x182>
 752:	2c 81       	ldd	r18, Y+4	; 0x04
 754:	3d 81       	ldd	r19, Y+5	; 0x05
 756:	22 30       	cpi	r18, 0x02	; 2
 758:	31 05       	cpc	r19, r1
 75a:	2c f4       	brge	.+10     	; 0x766 <DIO_SetPinDirection+0x140>
 75c:	8c 81       	ldd	r24, Y+4	; 0x04
 75e:	9d 81       	ldd	r25, Y+5	; 0x05
 760:	00 97       	sbiw	r24, 0x00	; 0
 762:	69 f0       	breq	.+26     	; 0x77e <DIO_SetPinDirection+0x158>
 764:	5f c0       	rjmp	.+190    	; 0x824 <DIO_SetPinDirection+0x1fe>
 766:	2c 81       	ldd	r18, Y+4	; 0x04
 768:	3d 81       	ldd	r19, Y+5	; 0x05
 76a:	22 30       	cpi	r18, 0x02	; 2
 76c:	31 05       	cpc	r19, r1
 76e:	89 f1       	breq	.+98     	; 0x7d2 <DIO_SetPinDirection+0x1ac>
 770:	8c 81       	ldd	r24, Y+4	; 0x04
 772:	9d 81       	ldd	r25, Y+5	; 0x05
 774:	83 30       	cpi	r24, 0x03	; 3
 776:	91 05       	cpc	r25, r1
 778:	09 f4       	brne	.+2      	; 0x77c <DIO_SetPinDirection+0x156>
 77a:	40 c0       	rjmp	.+128    	; 0x7fc <DIO_SetPinDirection+0x1d6>
 77c:	53 c0       	rjmp	.+166    	; 0x824 <DIO_SetPinDirection+0x1fe>
			{
				case DIO_PORTA: CLR_BIT(DIO_u8DDRA_REG,u8PinIdCopy); break;
 77e:	aa e3       	ldi	r26, 0x3A	; 58
 780:	b0 e0       	ldi	r27, 0x00	; 0
 782:	ea e3       	ldi	r30, 0x3A	; 58
 784:	f0 e0       	ldi	r31, 0x00	; 0
 786:	80 81       	ld	r24, Z
 788:	48 2f       	mov	r20, r24
 78a:	8a 81       	ldd	r24, Y+2	; 0x02
 78c:	28 2f       	mov	r18, r24
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	90 e0       	ldi	r25, 0x00	; 0
 794:	02 2e       	mov	r0, r18
 796:	02 c0       	rjmp	.+4      	; 0x79c <DIO_SetPinDirection+0x176>
 798:	88 0f       	add	r24, r24
 79a:	99 1f       	adc	r25, r25
 79c:	0a 94       	dec	r0
 79e:	e2 f7       	brpl	.-8      	; 0x798 <DIO_SetPinDirection+0x172>
 7a0:	80 95       	com	r24
 7a2:	84 23       	and	r24, r20
 7a4:	8c 93       	st	X, r24
 7a6:	3e c0       	rjmp	.+124    	; 0x824 <DIO_SetPinDirection+0x1fe>
				case DIO_PORTB: CLR_BIT(DIO_u8DDRB_REG,u8PinIdCopy); break;
 7a8:	a7 e3       	ldi	r26, 0x37	; 55
 7aa:	b0 e0       	ldi	r27, 0x00	; 0
 7ac:	e7 e3       	ldi	r30, 0x37	; 55
 7ae:	f0 e0       	ldi	r31, 0x00	; 0
 7b0:	80 81       	ld	r24, Z
 7b2:	48 2f       	mov	r20, r24
 7b4:	8a 81       	ldd	r24, Y+2	; 0x02
 7b6:	28 2f       	mov	r18, r24
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	81 e0       	ldi	r24, 0x01	; 1
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	02 2e       	mov	r0, r18
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <DIO_SetPinDirection+0x1a0>
 7c2:	88 0f       	add	r24, r24
 7c4:	99 1f       	adc	r25, r25
 7c6:	0a 94       	dec	r0
 7c8:	e2 f7       	brpl	.-8      	; 0x7c2 <DIO_SetPinDirection+0x19c>
 7ca:	80 95       	com	r24
 7cc:	84 23       	and	r24, r20
 7ce:	8c 93       	st	X, r24
 7d0:	29 c0       	rjmp	.+82     	; 0x824 <DIO_SetPinDirection+0x1fe>
				case DIO_PORTC: CLR_BIT(DIO_u8DDRC_REG,u8PinIdCopy); break;
 7d2:	a4 e3       	ldi	r26, 0x34	; 52
 7d4:	b0 e0       	ldi	r27, 0x00	; 0
 7d6:	e4 e3       	ldi	r30, 0x34	; 52
 7d8:	f0 e0       	ldi	r31, 0x00	; 0
 7da:	80 81       	ld	r24, Z
 7dc:	48 2f       	mov	r20, r24
 7de:	8a 81       	ldd	r24, Y+2	; 0x02
 7e0:	28 2f       	mov	r18, r24
 7e2:	30 e0       	ldi	r19, 0x00	; 0
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	02 2e       	mov	r0, r18
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <DIO_SetPinDirection+0x1ca>
 7ec:	88 0f       	add	r24, r24
 7ee:	99 1f       	adc	r25, r25
 7f0:	0a 94       	dec	r0
 7f2:	e2 f7       	brpl	.-8      	; 0x7ec <DIO_SetPinDirection+0x1c6>
 7f4:	80 95       	com	r24
 7f6:	84 23       	and	r24, r20
 7f8:	8c 93       	st	X, r24
 7fa:	14 c0       	rjmp	.+40     	; 0x824 <DIO_SetPinDirection+0x1fe>
				case DIO_PORTD: CLR_BIT(DIO_u8DDRD_REG,u8PinIdCopy); break;
 7fc:	a1 e3       	ldi	r26, 0x31	; 49
 7fe:	b0 e0       	ldi	r27, 0x00	; 0
 800:	e1 e3       	ldi	r30, 0x31	; 49
 802:	f0 e0       	ldi	r31, 0x00	; 0
 804:	80 81       	ld	r24, Z
 806:	48 2f       	mov	r20, r24
 808:	8a 81       	ldd	r24, Y+2	; 0x02
 80a:	28 2f       	mov	r18, r24
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	90 e0       	ldi	r25, 0x00	; 0
 812:	02 2e       	mov	r0, r18
 814:	02 c0       	rjmp	.+4      	; 0x81a <DIO_SetPinDirection+0x1f4>
 816:	88 0f       	add	r24, r24
 818:	99 1f       	adc	r25, r25
 81a:	0a 94       	dec	r0
 81c:	e2 f7       	brpl	.-8      	; 0x816 <DIO_SetPinDirection+0x1f0>
 81e:	80 95       	com	r24
 820:	84 23       	and	r24, r20
 822:	8c 93       	st	X, r24

	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
 824:	27 96       	adiw	r28, 0x07	; 7
 826:	0f b6       	in	r0, 0x3f	; 63
 828:	f8 94       	cli
 82a:	de bf       	out	0x3e, r29	; 62
 82c:	0f be       	out	0x3f, r0	; 63
 82e:	cd bf       	out	0x3d, r28	; 61
 830:	cf 91       	pop	r28
 832:	df 91       	pop	r29
 834:	08 95       	ret

00000836 <DIO_SetPortDirection>:


/* IO Ports */
extern void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
 836:	df 93       	push	r29
 838:	cf 93       	push	r28
 83a:	00 d0       	rcall	.+0      	; 0x83c <DIO_SetPortDirection+0x6>
 83c:	00 d0       	rcall	.+0      	; 0x83e <DIO_SetPortDirection+0x8>
 83e:	cd b7       	in	r28, 0x3d	; 61
 840:	de b7       	in	r29, 0x3e	; 62
 842:	89 83       	std	Y+1, r24	; 0x01
 844:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
 846:	89 81       	ldd	r24, Y+1	; 0x01
 848:	28 2f       	mov	r18, r24
 84a:	30 e0       	ldi	r19, 0x00	; 0
 84c:	3c 83       	std	Y+4, r19	; 0x04
 84e:	2b 83       	std	Y+3, r18	; 0x03
 850:	8b 81       	ldd	r24, Y+3	; 0x03
 852:	9c 81       	ldd	r25, Y+4	; 0x04
 854:	81 30       	cpi	r24, 0x01	; 1
 856:	91 05       	cpc	r25, r1
 858:	d1 f0       	breq	.+52     	; 0x88e <DIO_SetPortDirection+0x58>
 85a:	2b 81       	ldd	r18, Y+3	; 0x03
 85c:	3c 81       	ldd	r19, Y+4	; 0x04
 85e:	22 30       	cpi	r18, 0x02	; 2
 860:	31 05       	cpc	r19, r1
 862:	2c f4       	brge	.+10     	; 0x86e <DIO_SetPortDirection+0x38>
 864:	8b 81       	ldd	r24, Y+3	; 0x03
 866:	9c 81       	ldd	r25, Y+4	; 0x04
 868:	00 97       	sbiw	r24, 0x00	; 0
 86a:	61 f0       	breq	.+24     	; 0x884 <DIO_SetPortDirection+0x4e>
 86c:	1e c0       	rjmp	.+60     	; 0x8aa <DIO_SetPortDirection+0x74>
 86e:	2b 81       	ldd	r18, Y+3	; 0x03
 870:	3c 81       	ldd	r19, Y+4	; 0x04
 872:	22 30       	cpi	r18, 0x02	; 2
 874:	31 05       	cpc	r19, r1
 876:	81 f0       	breq	.+32     	; 0x898 <DIO_SetPortDirection+0x62>
 878:	8b 81       	ldd	r24, Y+3	; 0x03
 87a:	9c 81       	ldd	r25, Y+4	; 0x04
 87c:	83 30       	cpi	r24, 0x03	; 3
 87e:	91 05       	cpc	r25, r1
 880:	81 f0       	breq	.+32     	; 0x8a2 <DIO_SetPortDirection+0x6c>
 882:	13 c0       	rjmp	.+38     	; 0x8aa <DIO_SetPortDirection+0x74>
	{
		case     DIO_PORTA: DIO_u8DDRA_REG = u8PortDir; break;
 884:	ea e3       	ldi	r30, 0x3A	; 58
 886:	f0 e0       	ldi	r31, 0x00	; 0
 888:	8a 81       	ldd	r24, Y+2	; 0x02
 88a:	80 83       	st	Z, r24
 88c:	0e c0       	rjmp	.+28     	; 0x8aa <DIO_SetPortDirection+0x74>
		case     DIO_PORTB: DIO_u8DDRB_REG = u8PortDir; break;
 88e:	e7 e3       	ldi	r30, 0x37	; 55
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	8a 81       	ldd	r24, Y+2	; 0x02
 894:	80 83       	st	Z, r24
 896:	09 c0       	rjmp	.+18     	; 0x8aa <DIO_SetPortDirection+0x74>
		case     DIO_PORTC: DIO_u8DDRC_REG = u8PortDir; break;
 898:	e4 e3       	ldi	r30, 0x34	; 52
 89a:	f0 e0       	ldi	r31, 0x00	; 0
 89c:	8a 81       	ldd	r24, Y+2	; 0x02
 89e:	80 83       	st	Z, r24
 8a0:	04 c0       	rjmp	.+8      	; 0x8aa <DIO_SetPortDirection+0x74>
		case     DIO_PORTD: DIO_u8DDRD_REG = u8PortDir; break;
 8a2:	e1 e3       	ldi	r30, 0x31	; 49
 8a4:	f0 e0       	ldi	r31, 0x00	; 0
 8a6:	8a 81       	ldd	r24, Y+2	; 0x02
 8a8:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
 8aa:	0f 90       	pop	r0
 8ac:	0f 90       	pop	r0
 8ae:	0f 90       	pop	r0
 8b0:	0f 90       	pop	r0
 8b2:	cf 91       	pop	r28
 8b4:	df 91       	pop	r29
 8b6:	08 95       	ret

000008b8 <DIO_SetPortValue>:

extern void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
 8b8:	df 93       	push	r29
 8ba:	cf 93       	push	r28
 8bc:	00 d0       	rcall	.+0      	; 0x8be <DIO_SetPortValue+0x6>
 8be:	00 d0       	rcall	.+0      	; 0x8c0 <DIO_SetPortValue+0x8>
 8c0:	cd b7       	in	r28, 0x3d	; 61
 8c2:	de b7       	in	r29, 0x3e	; 62
 8c4:	89 83       	std	Y+1, r24	; 0x01
 8c6:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
 8c8:	89 81       	ldd	r24, Y+1	; 0x01
 8ca:	28 2f       	mov	r18, r24
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	3c 83       	std	Y+4, r19	; 0x04
 8d0:	2b 83       	std	Y+3, r18	; 0x03
 8d2:	8b 81       	ldd	r24, Y+3	; 0x03
 8d4:	9c 81       	ldd	r25, Y+4	; 0x04
 8d6:	81 30       	cpi	r24, 0x01	; 1
 8d8:	91 05       	cpc	r25, r1
 8da:	d1 f0       	breq	.+52     	; 0x910 <DIO_SetPortValue+0x58>
 8dc:	2b 81       	ldd	r18, Y+3	; 0x03
 8de:	3c 81       	ldd	r19, Y+4	; 0x04
 8e0:	22 30       	cpi	r18, 0x02	; 2
 8e2:	31 05       	cpc	r19, r1
 8e4:	2c f4       	brge	.+10     	; 0x8f0 <DIO_SetPortValue+0x38>
 8e6:	8b 81       	ldd	r24, Y+3	; 0x03
 8e8:	9c 81       	ldd	r25, Y+4	; 0x04
 8ea:	00 97       	sbiw	r24, 0x00	; 0
 8ec:	61 f0       	breq	.+24     	; 0x906 <DIO_SetPortValue+0x4e>
 8ee:	1e c0       	rjmp	.+60     	; 0x92c <DIO_SetPortValue+0x74>
 8f0:	2b 81       	ldd	r18, Y+3	; 0x03
 8f2:	3c 81       	ldd	r19, Y+4	; 0x04
 8f4:	22 30       	cpi	r18, 0x02	; 2
 8f6:	31 05       	cpc	r19, r1
 8f8:	81 f0       	breq	.+32     	; 0x91a <DIO_SetPortValue+0x62>
 8fa:	8b 81       	ldd	r24, Y+3	; 0x03
 8fc:	9c 81       	ldd	r25, Y+4	; 0x04
 8fe:	83 30       	cpi	r24, 0x03	; 3
 900:	91 05       	cpc	r25, r1
 902:	81 f0       	breq	.+32     	; 0x924 <DIO_SetPortValue+0x6c>
 904:	13 c0       	rjmp	.+38     	; 0x92c <DIO_SetPortValue+0x74>
	{
		case     DIO_PORTA: DIO_u8PORTA_REG = u8PortVal; break;
 906:	eb e3       	ldi	r30, 0x3B	; 59
 908:	f0 e0       	ldi	r31, 0x00	; 0
 90a:	8a 81       	ldd	r24, Y+2	; 0x02
 90c:	80 83       	st	Z, r24
 90e:	0e c0       	rjmp	.+28     	; 0x92c <DIO_SetPortValue+0x74>
		case     DIO_PORTB: DIO_u8PORTB_REG = u8PortVal; break;
 910:	e8 e3       	ldi	r30, 0x38	; 56
 912:	f0 e0       	ldi	r31, 0x00	; 0
 914:	8a 81       	ldd	r24, Y+2	; 0x02
 916:	80 83       	st	Z, r24
 918:	09 c0       	rjmp	.+18     	; 0x92c <DIO_SetPortValue+0x74>
		case     DIO_PORTC: DIO_u8PORTC_REG = u8PortVal; break;
 91a:	e5 e3       	ldi	r30, 0x35	; 53
 91c:	f0 e0       	ldi	r31, 0x00	; 0
 91e:	8a 81       	ldd	r24, Y+2	; 0x02
 920:	80 83       	st	Z, r24
 922:	04 c0       	rjmp	.+8      	; 0x92c <DIO_SetPortValue+0x74>
		case     DIO_PORTD: DIO_u8PORTD_REG = u8PortVal; break;
 924:	e2 e3       	ldi	r30, 0x32	; 50
 926:	f0 e0       	ldi	r31, 0x00	; 0
 928:	8a 81       	ldd	r24, Y+2	; 0x02
 92a:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
 92c:	0f 90       	pop	r0
 92e:	0f 90       	pop	r0
 930:	0f 90       	pop	r0
 932:	0f 90       	pop	r0
 934:	cf 91       	pop	r28
 936:	df 91       	pop	r29
 938:	08 95       	ret

0000093a <GIE_voidEnable>:
#include "GIE_interface.h"
#include "GIE_register.h"


void GIE_voidEnable(void)
{
 93a:	df 93       	push	r29
 93c:	cf 93       	push	r28
 93e:	cd b7       	in	r28, 0x3d	; 61
 940:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
 942:	af e5       	ldi	r26, 0x5F	; 95
 944:	b0 e0       	ldi	r27, 0x00	; 0
 946:	ef e5       	ldi	r30, 0x5F	; 95
 948:	f0 e0       	ldi	r31, 0x00	; 0
 94a:	80 81       	ld	r24, Z
 94c:	80 68       	ori	r24, 0x80	; 128
 94e:	8c 93       	st	X, r24
}
 950:	cf 91       	pop	r28
 952:	df 91       	pop	r29
 954:	08 95       	ret

00000956 <GIE_voiddisable>:
void GIE_voiddisable(void)
{
 956:	df 93       	push	r29
 958:	cf 93       	push	r28
 95a:	cd b7       	in	r28, 0x3d	; 61
 95c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,SREG_I);
 95e:	af e5       	ldi	r26, 0x5F	; 95
 960:	b0 e0       	ldi	r27, 0x00	; 0
 962:	ef e5       	ldi	r30, 0x5F	; 95
 964:	f0 e0       	ldi	r31, 0x00	; 0
 966:	80 81       	ld	r24, Z
 968:	8f 77       	andi	r24, 0x7F	; 127
 96a:	8c 93       	st	X, r24
}
 96c:	cf 91       	pop	r28
 96e:	df 91       	pop	r29
 970:	08 95       	ret

00000972 <main>:
void ADC_Notification_Fun();

//make global variable to read the value coming to port A from POTINTIOMETER
u8 APP_Get_ADC_READ;
void main (void)
{
 972:	df 93       	push	r29
 974:	cf 93       	push	r28
 976:	cd b7       	in	r28, 0x3d	; 61
 978:	de b7       	in	r29, 0x3e	; 62
	/*all pins we want them to read analog values are set to be inputs
	 * and other pins that are being used as output to make specific function
	 * ---all these done as  next
	 * assume A is input all pins
	 * and    C is output all pins */
	DIO_SetPortDirection(DIO_PORTA,DIO_INPUT);  //input
 97a:	80 e0       	ldi	r24, 0x00	; 0
 97c:	60 e0       	ldi	r22, 0x00	; 0
 97e:	0e 94 1b 04 	call	0x836	; 0x836 <DIO_SetPortDirection>
	DIO_SetPortDirection(DIO_PORTC,DIO_OUTPUT); //output
 982:	82 e0       	ldi	r24, 0x02	; 2
 984:	6f ef       	ldi	r22, 0xFF	; 255
 986:	0e 94 1b 04 	call	0x836	; 0x836 <DIO_SetPortDirection>

	//initialization of ADC
	ADC_voidInit();
 98a:	0e 94 3e 00 	call	0x7c	; 0x7c <ADC_voidInit>

	//enable global interrupt
	GIE_voidEnable();
 98e:	0e 94 9d 04 	call	0x93a	; 0x93a <GIE_voidEnable>

	while(1)
	{
		ADC_ASYNC_StartConversion(0,&APP_Get_ADC_READ,&ADC_Notification_Fun);
 992:	25 e6       	ldi	r18, 0x65	; 101
 994:	30 e0       	ldi	r19, 0x00	; 0
 996:	43 ed       	ldi	r20, 0xD3	; 211
 998:	54 e0       	ldi	r21, 0x04	; 4
 99a:	80 e0       	ldi	r24, 0x00	; 0
 99c:	90 e0       	ldi	r25, 0x00	; 0
 99e:	b9 01       	movw	r22, r18
 9a0:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <ADC_ASYNC_StartConversion>
 9a4:	f6 cf       	rjmp	.-20     	; 0x992 <main+0x20>

000009a6 <ADC_Notification_Fun>:
	}
}

void ADC_Notification_Fun()
{
 9a6:	df 93       	push	r29
 9a8:	cf 93       	push	r28
 9aa:	cd b7       	in	r28, 0x3d	; 61
 9ac:	de b7       	in	r29, 0x3e	; 62
	DIO_SetPortValue(DIO_PORTC,APP_Get_ADC_READ);
 9ae:	90 91 65 00 	lds	r25, 0x0065
 9b2:	82 e0       	ldi	r24, 0x02	; 2
 9b4:	69 2f       	mov	r22, r25
 9b6:	0e 94 5c 04 	call	0x8b8	; 0x8b8 <DIO_SetPortValue>
}
 9ba:	cf 91       	pop	r28
 9bc:	df 91       	pop	r29
 9be:	08 95       	ret

000009c0 <_exit>:
 9c0:	f8 94       	cli

000009c2 <__stop_program>:
 9c2:	ff cf       	rjmp	.-2      	; 0x9c2 <__stop_program>
