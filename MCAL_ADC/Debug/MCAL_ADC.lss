
MCAL_ADC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000007f8  00000000  00000000  000007f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000463  00000000  00000000  00000ff0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 b9 03 	call	0x772	; 0x772 <main>
  64:	0c 94 cf 03 	jmp	0x79e	; 0x79e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_voidInit>:
#include "ADC_private.h"
#include "ADC_config.h"
#include "ADC_register.h"

void ADC_voidInit (void)
{
  6c:	df 93       	push	r29
  6e:	cf 93       	push	r28
  70:	cd b7       	in	r28, 0x3d	; 61
  72:	de b7       	in	r29, 0x3e	; 62
	      /*ADMUX_register */
	//AVCC as reference voltage
	SET_BIT(ADMUX,ADMUX_REFSO);
  74:	a7 e2       	ldi	r26, 0x27	; 39
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	e7 e2       	ldi	r30, 0x27	; 39
  7a:	f0 e0       	ldi	r31, 0x00	; 0
  7c:	80 81       	ld	r24, Z
  7e:	80 64       	ori	r24, 0x40	; 64
  80:	8c 93       	st	X, r24
	CLR_BIT(ADMUX,ADMUX_REFS1);
  82:	a7 e2       	ldi	r26, 0x27	; 39
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e7 e2       	ldi	r30, 0x27	; 39
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8f 77       	andi	r24, 0x7F	; 127
  8e:	8c 93       	st	X, r24

	//Activate left adjust to use 8 bits
	SET_BIT(ADMUX,ADMUX_ADLAR);
  90:	a7 e2       	ldi	r26, 0x27	; 39
  92:	b0 e0       	ldi	r27, 0x00	; 0
  94:	e7 e2       	ldi	r30, 0x27	; 39
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	80 81       	ld	r24, Z
  9a:	80 62       	ori	r24, 0x20	; 32
  9c:	8c 93       	st	X, r24

	//Set Prescaler to divide by 128
	SET_BIT(ADCSRA,ADCSRA_ADPSO);
  9e:	a6 e2       	ldi	r26, 0x26	; 38
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	e6 e2       	ldi	r30, 0x26	; 38
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS1);
  ac:	a6 e2       	ldi	r26, 0x26	; 38
  ae:	b0 e0       	ldi	r27, 0x00	; 0
  b0:	e6 e2       	ldi	r30, 0x26	; 38
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	82 60       	ori	r24, 0x02	; 2
  b8:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADCSRA_ADPS2);
  ba:	a6 e2       	ldi	r26, 0x26	; 38
  bc:	b0 e0       	ldi	r27, 0x00	; 0
  be:	e6 e2       	ldi	r30, 0x26	; 38
  c0:	f0 e0       	ldi	r31, 0x00	; 0
  c2:	80 81       	ld	r24, Z
  c4:	84 60       	ori	r24, 0x04	; 4
  c6:	8c 93       	st	X, r24

	//Enable peripheral-should be last part to make enable while every thing is OK
	SET_BIT(ADCSRA,ADCSRA_ADEN);
  c8:	a6 e2       	ldi	r26, 0x26	; 38
  ca:	b0 e0       	ldi	r27, 0x00	; 0
  cc:	e6 e2       	ldi	r30, 0x26	; 38
  ce:	f0 e0       	ldi	r31, 0x00	; 0
  d0:	80 81       	ld	r24, Z
  d2:	80 68       	ori	r24, 0x80	; 128
  d4:	8c 93       	st	X, r24
}
  d6:	cf 91       	pop	r28
  d8:	df 91       	pop	r29
  da:	08 95       	ret

000000dc <ADC_ChannelReading>:

u8  ADC_ChannelReading(u8 Copy_u8Channel)
{
  dc:	df 93       	push	r29
  de:	cf 93       	push	r28
  e0:	0f 92       	push	r0
  e2:	cd b7       	in	r28, 0x3d	; 61
  e4:	de b7       	in	r29, 0x3e	; 62
  e6:	89 83       	std	Y+1, r24	; 0x01
	//clear the mux bits in ADMUX register
	ADMUX &=0b11100000;
  e8:	a7 e2       	ldi	r26, 0x27	; 39
  ea:	b0 e0       	ldi	r27, 0x00	; 0
  ec:	e7 e2       	ldi	r30, 0x27	; 39
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 7e       	andi	r24, 0xE0	; 224
  f4:	8c 93       	st	X, r24

	//set the required channel into mux bits
	ADMUX |= Copy_u8Channel;
  f6:	a7 e2       	ldi	r26, 0x27	; 39
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	e7 e2       	ldi	r30, 0x27	; 39
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	90 81       	ld	r25, Z
 100:	89 81       	ldd	r24, Y+1	; 0x01
 102:	89 2b       	or	r24, r25
 104:	8c 93       	st	X, r24

	//start conversion
	SET_BIT(ADCSRA,ADCSRA_ADSC);
 106:	a6 e2       	ldi	r26, 0x26	; 38
 108:	b0 e0       	ldi	r27, 0x00	; 0
 10a:	e6 e2       	ldi	r30, 0x26	; 38
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	80 81       	ld	r24, Z
 110:	80 64       	ori	r24, 0x40	; 64
 112:	8c 93       	st	X, r24

	//polling (busy waiting)until the conversion complete flag is set
	while((GET_BIT(ADCSRA,ADCSRA_ADIF))==0);
 114:	e6 e2       	ldi	r30, 0x26	; 38
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	80 81       	ld	r24, Z
 11a:	82 95       	swap	r24
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	88 2f       	mov	r24, r24
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	81 70       	andi	r24, 0x01	; 1
 124:	90 70       	andi	r25, 0x00	; 0
 126:	00 97       	sbiw	r24, 0x00	; 0
 128:	a9 f3       	breq	.-22     	; 0x114 <ADC_ChannelReading+0x38>

	//clear the conversion complete flag
	/*i will make the flag down by my self because i'm using polling
	 * but if we use interrupt it will be down by it self--no need for this step*/
	SET_BIT(ADCSRA,ADCSRA_ADIF);
 12a:	a6 e2       	ldi	r26, 0x26	; 38
 12c:	b0 e0       	ldi	r27, 0x00	; 0
 12e:	e6 e2       	ldi	r30, 0x26	; 38
 130:	f0 e0       	ldi	r31, 0x00	; 0
 132:	80 81       	ld	r24, Z
 134:	80 61       	ori	r24, 0x10	; 16
 136:	8c 93       	st	X, r24

	//Return the reading (Left adjust using 8 bits )== Look at last part in register.h
	return ADCH;
 138:	e5 e2       	ldi	r30, 0x25	; 37
 13a:	f0 e0       	ldi	r31, 0x00	; 0
 13c:	80 81       	ld	r24, Z

}
 13e:	0f 90       	pop	r0
 140:	cf 91       	pop	r28
 142:	df 91       	pop	r29
 144:	08 95       	ret

00000146 <DIO_SetPinValue>:
#include "DIO_int.h"
#include "DIO_priv.h"

/* IO Pins */
extern void DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
 146:	df 93       	push	r29
 148:	cf 93       	push	r28
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
 14e:	27 97       	sbiw	r28, 0x07	; 7
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	f8 94       	cli
 154:	de bf       	out	0x3e, r29	; 62
 156:	0f be       	out	0x3f, r0	; 63
 158:	cd bf       	out	0x3d, r28	; 61
 15a:	89 83       	std	Y+1, r24	; 0x01
 15c:	6a 83       	std	Y+2, r22	; 0x02
 15e:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= DIO_PORTD) && (u8PinIdCopy <= DIO_PIN7))
 160:	89 81       	ldd	r24, Y+1	; 0x01
 162:	84 30       	cpi	r24, 0x04	; 4
 164:	08 f0       	brcs	.+2      	; 0x168 <DIO_SetPinValue+0x22>
 166:	ee c0       	rjmp	.+476    	; 0x344 <DIO_SetPinValue+0x1fe>
 168:	8a 81       	ldd	r24, Y+2	; 0x02
 16a:	88 30       	cpi	r24, 0x08	; 8
 16c:	08 f0       	brcs	.+2      	; 0x170 <DIO_SetPinValue+0x2a>
 16e:	ea c0       	rjmp	.+468    	; 0x344 <DIO_SetPinValue+0x1fe>
	{
		if (u8PinValCopy == DIO_HIGH)
 170:	8b 81       	ldd	r24, Y+3	; 0x03
 172:	81 30       	cpi	r24, 0x01	; 1
 174:	09 f0       	breq	.+2      	; 0x178 <DIO_SetPinValue+0x32>
 176:	6f c0       	rjmp	.+222    	; 0x256 <DIO_SetPinValue+0x110>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 178:	89 81       	ldd	r24, Y+1	; 0x01
 17a:	28 2f       	mov	r18, r24
 17c:	30 e0       	ldi	r19, 0x00	; 0
 17e:	3f 83       	std	Y+7, r19	; 0x07
 180:	2e 83       	std	Y+6, r18	; 0x06
 182:	8e 81       	ldd	r24, Y+6	; 0x06
 184:	9f 81       	ldd	r25, Y+7	; 0x07
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	91 05       	cpc	r25, r1
 18a:	49 f1       	breq	.+82     	; 0x1de <DIO_SetPinValue+0x98>
 18c:	2e 81       	ldd	r18, Y+6	; 0x06
 18e:	3f 81       	ldd	r19, Y+7	; 0x07
 190:	22 30       	cpi	r18, 0x02	; 2
 192:	31 05       	cpc	r19, r1
 194:	2c f4       	brge	.+10     	; 0x1a0 <DIO_SetPinValue+0x5a>
 196:	8e 81       	ldd	r24, Y+6	; 0x06
 198:	9f 81       	ldd	r25, Y+7	; 0x07
 19a:	00 97       	sbiw	r24, 0x00	; 0
 19c:	61 f0       	breq	.+24     	; 0x1b6 <DIO_SetPinValue+0x70>
 19e:	d2 c0       	rjmp	.+420    	; 0x344 <DIO_SetPinValue+0x1fe>
 1a0:	2e 81       	ldd	r18, Y+6	; 0x06
 1a2:	3f 81       	ldd	r19, Y+7	; 0x07
 1a4:	22 30       	cpi	r18, 0x02	; 2
 1a6:	31 05       	cpc	r19, r1
 1a8:	71 f1       	breq	.+92     	; 0x206 <DIO_SetPinValue+0xc0>
 1aa:	8e 81       	ldd	r24, Y+6	; 0x06
 1ac:	9f 81       	ldd	r25, Y+7	; 0x07
 1ae:	83 30       	cpi	r24, 0x03	; 3
 1b0:	91 05       	cpc	r25, r1
 1b2:	e9 f1       	breq	.+122    	; 0x22e <DIO_SetPinValue+0xe8>
 1b4:	c7 c0       	rjmp	.+398    	; 0x344 <DIO_SetPinValue+0x1fe>
			{
				case DIO_PORTA: SET_BIT(DIO_u8PORTA_REG,u8PinIdCopy); break;
 1b6:	ab e3       	ldi	r26, 0x3B	; 59
 1b8:	b0 e0       	ldi	r27, 0x00	; 0
 1ba:	eb e3       	ldi	r30, 0x3B	; 59
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	48 2f       	mov	r20, r24
 1c2:	8a 81       	ldd	r24, Y+2	; 0x02
 1c4:	28 2f       	mov	r18, r24
 1c6:	30 e0       	ldi	r19, 0x00	; 0
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 2e       	mov	r0, r18
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_SetPinValue+0x8e>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	0a 94       	dec	r0
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_SetPinValue+0x8a>
 1d8:	84 2b       	or	r24, r20
 1da:	8c 93       	st	X, r24
 1dc:	b3 c0       	rjmp	.+358    	; 0x344 <DIO_SetPinValue+0x1fe>
				case DIO_PORTB: SET_BIT(DIO_u8PORTB_REG,u8PinIdCopy); break;
 1de:	a8 e3       	ldi	r26, 0x38	; 56
 1e0:	b0 e0       	ldi	r27, 0x00	; 0
 1e2:	e8 e3       	ldi	r30, 0x38	; 56
 1e4:	f0 e0       	ldi	r31, 0x00	; 0
 1e6:	80 81       	ld	r24, Z
 1e8:	48 2f       	mov	r20, r24
 1ea:	8a 81       	ldd	r24, Y+2	; 0x02
 1ec:	28 2f       	mov	r18, r24
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 2e       	mov	r0, r18
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_SetPinValue+0xb6>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	0a 94       	dec	r0
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_SetPinValue+0xb2>
 200:	84 2b       	or	r24, r20
 202:	8c 93       	st	X, r24
 204:	9f c0       	rjmp	.+318    	; 0x344 <DIO_SetPinValue+0x1fe>
				case DIO_PORTC: SET_BIT(DIO_u8PORTC_REG,u8PinIdCopy); break;
 206:	a5 e3       	ldi	r26, 0x35	; 53
 208:	b0 e0       	ldi	r27, 0x00	; 0
 20a:	e5 e3       	ldi	r30, 0x35	; 53
 20c:	f0 e0       	ldi	r31, 0x00	; 0
 20e:	80 81       	ld	r24, Z
 210:	48 2f       	mov	r20, r24
 212:	8a 81       	ldd	r24, Y+2	; 0x02
 214:	28 2f       	mov	r18, r24
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 2e       	mov	r0, r18
 21e:	02 c0       	rjmp	.+4      	; 0x224 <DIO_SetPinValue+0xde>
 220:	88 0f       	add	r24, r24
 222:	99 1f       	adc	r25, r25
 224:	0a 94       	dec	r0
 226:	e2 f7       	brpl	.-8      	; 0x220 <DIO_SetPinValue+0xda>
 228:	84 2b       	or	r24, r20
 22a:	8c 93       	st	X, r24
 22c:	8b c0       	rjmp	.+278    	; 0x344 <DIO_SetPinValue+0x1fe>
				case DIO_PORTD: SET_BIT(DIO_u8PORTD_REG,u8PinIdCopy); break;
 22e:	a2 e3       	ldi	r26, 0x32	; 50
 230:	b0 e0       	ldi	r27, 0x00	; 0
 232:	e2 e3       	ldi	r30, 0x32	; 50
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	48 2f       	mov	r20, r24
 23a:	8a 81       	ldd	r24, Y+2	; 0x02
 23c:	28 2f       	mov	r18, r24
 23e:	30 e0       	ldi	r19, 0x00	; 0
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	90 e0       	ldi	r25, 0x00	; 0
 244:	02 2e       	mov	r0, r18
 246:	02 c0       	rjmp	.+4      	; 0x24c <DIO_SetPinValue+0x106>
 248:	88 0f       	add	r24, r24
 24a:	99 1f       	adc	r25, r25
 24c:	0a 94       	dec	r0
 24e:	e2 f7       	brpl	.-8      	; 0x248 <DIO_SetPinValue+0x102>
 250:	84 2b       	or	r24, r20
 252:	8c 93       	st	X, r24
 254:	77 c0       	rjmp	.+238    	; 0x344 <DIO_SetPinValue+0x1fe>
			}

		}

		else if (u8PinValCopy == DIO_LOW)
 256:	8b 81       	ldd	r24, Y+3	; 0x03
 258:	88 23       	and	r24, r24
 25a:	09 f0       	breq	.+2      	; 0x25e <DIO_SetPinValue+0x118>
 25c:	73 c0       	rjmp	.+230    	; 0x344 <DIO_SetPinValue+0x1fe>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 25e:	89 81       	ldd	r24, Y+1	; 0x01
 260:	28 2f       	mov	r18, r24
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	3d 83       	std	Y+5, r19	; 0x05
 266:	2c 83       	std	Y+4, r18	; 0x04
 268:	8c 81       	ldd	r24, Y+4	; 0x04
 26a:	9d 81       	ldd	r25, Y+5	; 0x05
 26c:	81 30       	cpi	r24, 0x01	; 1
 26e:	91 05       	cpc	r25, r1
 270:	59 f1       	breq	.+86     	; 0x2c8 <DIO_SetPinValue+0x182>
 272:	2c 81       	ldd	r18, Y+4	; 0x04
 274:	3d 81       	ldd	r19, Y+5	; 0x05
 276:	22 30       	cpi	r18, 0x02	; 2
 278:	31 05       	cpc	r19, r1
 27a:	2c f4       	brge	.+10     	; 0x286 <DIO_SetPinValue+0x140>
 27c:	8c 81       	ldd	r24, Y+4	; 0x04
 27e:	9d 81       	ldd	r25, Y+5	; 0x05
 280:	00 97       	sbiw	r24, 0x00	; 0
 282:	69 f0       	breq	.+26     	; 0x29e <DIO_SetPinValue+0x158>
 284:	5f c0       	rjmp	.+190    	; 0x344 <DIO_SetPinValue+0x1fe>
 286:	2c 81       	ldd	r18, Y+4	; 0x04
 288:	3d 81       	ldd	r19, Y+5	; 0x05
 28a:	22 30       	cpi	r18, 0x02	; 2
 28c:	31 05       	cpc	r19, r1
 28e:	89 f1       	breq	.+98     	; 0x2f2 <DIO_SetPinValue+0x1ac>
 290:	8c 81       	ldd	r24, Y+4	; 0x04
 292:	9d 81       	ldd	r25, Y+5	; 0x05
 294:	83 30       	cpi	r24, 0x03	; 3
 296:	91 05       	cpc	r25, r1
 298:	09 f4       	brne	.+2      	; 0x29c <DIO_SetPinValue+0x156>
 29a:	40 c0       	rjmp	.+128    	; 0x31c <DIO_SetPinValue+0x1d6>
 29c:	53 c0       	rjmp	.+166    	; 0x344 <DIO_SetPinValue+0x1fe>
			{
				case DIO_PORTA: CLR_BIT(DIO_u8PORTA_REG,u8PinIdCopy); break;
 29e:	ab e3       	ldi	r26, 0x3B	; 59
 2a0:	b0 e0       	ldi	r27, 0x00	; 0
 2a2:	eb e3       	ldi	r30, 0x3B	; 59
 2a4:	f0 e0       	ldi	r31, 0x00	; 0
 2a6:	80 81       	ld	r24, Z
 2a8:	48 2f       	mov	r20, r24
 2aa:	8a 81       	ldd	r24, Y+2	; 0x02
 2ac:	28 2f       	mov	r18, r24
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 2e       	mov	r0, r18
 2b6:	02 c0       	rjmp	.+4      	; 0x2bc <DIO_SetPinValue+0x176>
 2b8:	88 0f       	add	r24, r24
 2ba:	99 1f       	adc	r25, r25
 2bc:	0a 94       	dec	r0
 2be:	e2 f7       	brpl	.-8      	; 0x2b8 <DIO_SetPinValue+0x172>
 2c0:	80 95       	com	r24
 2c2:	84 23       	and	r24, r20
 2c4:	8c 93       	st	X, r24
 2c6:	3e c0       	rjmp	.+124    	; 0x344 <DIO_SetPinValue+0x1fe>
				case DIO_PORTB: CLR_BIT(DIO_u8PORTB_REG,u8PinIdCopy); break;
 2c8:	a8 e3       	ldi	r26, 0x38	; 56
 2ca:	b0 e0       	ldi	r27, 0x00	; 0
 2cc:	e8 e3       	ldi	r30, 0x38	; 56
 2ce:	f0 e0       	ldi	r31, 0x00	; 0
 2d0:	80 81       	ld	r24, Z
 2d2:	48 2f       	mov	r20, r24
 2d4:	8a 81       	ldd	r24, Y+2	; 0x02
 2d6:	28 2f       	mov	r18, r24
 2d8:	30 e0       	ldi	r19, 0x00	; 0
 2da:	81 e0       	ldi	r24, 0x01	; 1
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	02 2e       	mov	r0, r18
 2e0:	02 c0       	rjmp	.+4      	; 0x2e6 <DIO_SetPinValue+0x1a0>
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
 2e6:	0a 94       	dec	r0
 2e8:	e2 f7       	brpl	.-8      	; 0x2e2 <DIO_SetPinValue+0x19c>
 2ea:	80 95       	com	r24
 2ec:	84 23       	and	r24, r20
 2ee:	8c 93       	st	X, r24
 2f0:	29 c0       	rjmp	.+82     	; 0x344 <DIO_SetPinValue+0x1fe>
				case DIO_PORTC: CLR_BIT(DIO_u8PORTC_REG,u8PinIdCopy); break;
 2f2:	a5 e3       	ldi	r26, 0x35	; 53
 2f4:	b0 e0       	ldi	r27, 0x00	; 0
 2f6:	e5 e3       	ldi	r30, 0x35	; 53
 2f8:	f0 e0       	ldi	r31, 0x00	; 0
 2fa:	80 81       	ld	r24, Z
 2fc:	48 2f       	mov	r20, r24
 2fe:	8a 81       	ldd	r24, Y+2	; 0x02
 300:	28 2f       	mov	r18, r24
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	81 e0       	ldi	r24, 0x01	; 1
 306:	90 e0       	ldi	r25, 0x00	; 0
 308:	02 2e       	mov	r0, r18
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_SetPinValue+0x1ca>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	0a 94       	dec	r0
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_SetPinValue+0x1c6>
 314:	80 95       	com	r24
 316:	84 23       	and	r24, r20
 318:	8c 93       	st	X, r24
 31a:	14 c0       	rjmp	.+40     	; 0x344 <DIO_SetPinValue+0x1fe>
				case DIO_PORTD: CLR_BIT(DIO_u8PORTD_REG,u8PinIdCopy); break;
 31c:	a2 e3       	ldi	r26, 0x32	; 50
 31e:	b0 e0       	ldi	r27, 0x00	; 0
 320:	e2 e3       	ldi	r30, 0x32	; 50
 322:	f0 e0       	ldi	r31, 0x00	; 0
 324:	80 81       	ld	r24, Z
 326:	48 2f       	mov	r20, r24
 328:	8a 81       	ldd	r24, Y+2	; 0x02
 32a:	28 2f       	mov	r18, r24
 32c:	30 e0       	ldi	r19, 0x00	; 0
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	02 2e       	mov	r0, r18
 334:	02 c0       	rjmp	.+4      	; 0x33a <DIO_SetPinValue+0x1f4>
 336:	88 0f       	add	r24, r24
 338:	99 1f       	adc	r25, r25
 33a:	0a 94       	dec	r0
 33c:	e2 f7       	brpl	.-8      	; 0x336 <DIO_SetPinValue+0x1f0>
 33e:	80 95       	com	r24
 340:	84 23       	and	r24, r20
 342:	8c 93       	st	X, r24

	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
 344:	27 96       	adiw	r28, 0x07	; 7
 346:	0f b6       	in	r0, 0x3f	; 63
 348:	f8 94       	cli
 34a:	de bf       	out	0x3e, r29	; 62
 34c:	0f be       	out	0x3f, r0	; 63
 34e:	cd bf       	out	0x3d, r28	; 61
 350:	cf 91       	pop	r28
 352:	df 91       	pop	r29
 354:	08 95       	ret

00000356 <DIO_GetPinValue>:

extern u8 DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy)
{
 356:	df 93       	push	r29
 358:	cf 93       	push	r28
 35a:	00 d0       	rcall	.+0      	; 0x35c <DIO_GetPinValue+0x6>
 35c:	00 d0       	rcall	.+0      	; 0x35e <DIO_GetPinValue+0x8>
 35e:	0f 92       	push	r0
 360:	cd b7       	in	r28, 0x3d	; 61
 362:	de b7       	in	r29, 0x3e	; 62
 364:	8a 83       	std	Y+2, r24	; 0x02
 366:	6b 83       	std	Y+3, r22	; 0x03
	/* Define Local Variable to get the BIT Value */
	u8 u8ResultLocal;
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= DIO_PORTD) && (u8PinIdCopy <= DIO_PIN7))
 368:	8a 81       	ldd	r24, Y+2	; 0x02
 36a:	84 30       	cpi	r24, 0x04	; 4
 36c:	08 f0       	brcs	.+2      	; 0x370 <DIO_GetPinValue+0x1a>
 36e:	6c c0       	rjmp	.+216    	; 0x448 <DIO_GetPinValue+0xf2>
 370:	8b 81       	ldd	r24, Y+3	; 0x03
 372:	88 30       	cpi	r24, 0x08	; 8
 374:	08 f0       	brcs	.+2      	; 0x378 <DIO_GetPinValue+0x22>
 376:	68 c0       	rjmp	.+208    	; 0x448 <DIO_GetPinValue+0xf2>
	{
		/* Check on the Required PORT Number */
		switch (u8PortIdCopy)
 378:	8a 81       	ldd	r24, Y+2	; 0x02
 37a:	28 2f       	mov	r18, r24
 37c:	30 e0       	ldi	r19, 0x00	; 0
 37e:	3d 83       	std	Y+5, r19	; 0x05
 380:	2c 83       	std	Y+4, r18	; 0x04
 382:	4c 81       	ldd	r20, Y+4	; 0x04
 384:	5d 81       	ldd	r21, Y+5	; 0x05
 386:	41 30       	cpi	r20, 0x01	; 1
 388:	51 05       	cpc	r21, r1
 38a:	41 f1       	breq	.+80     	; 0x3dc <DIO_GetPinValue+0x86>
 38c:	8c 81       	ldd	r24, Y+4	; 0x04
 38e:	9d 81       	ldd	r25, Y+5	; 0x05
 390:	82 30       	cpi	r24, 0x02	; 2
 392:	91 05       	cpc	r25, r1
 394:	34 f4       	brge	.+12     	; 0x3a2 <DIO_GetPinValue+0x4c>
 396:	2c 81       	ldd	r18, Y+4	; 0x04
 398:	3d 81       	ldd	r19, Y+5	; 0x05
 39a:	21 15       	cp	r18, r1
 39c:	31 05       	cpc	r19, r1
 39e:	61 f0       	breq	.+24     	; 0x3b8 <DIO_GetPinValue+0x62>
 3a0:	55 c0       	rjmp	.+170    	; 0x44c <DIO_GetPinValue+0xf6>
 3a2:	4c 81       	ldd	r20, Y+4	; 0x04
 3a4:	5d 81       	ldd	r21, Y+5	; 0x05
 3a6:	42 30       	cpi	r20, 0x02	; 2
 3a8:	51 05       	cpc	r21, r1
 3aa:	51 f1       	breq	.+84     	; 0x400 <DIO_GetPinValue+0xaa>
 3ac:	8c 81       	ldd	r24, Y+4	; 0x04
 3ae:	9d 81       	ldd	r25, Y+5	; 0x05
 3b0:	83 30       	cpi	r24, 0x03	; 3
 3b2:	91 05       	cpc	r25, r1
 3b4:	b9 f1       	breq	.+110    	; 0x424 <DIO_GetPinValue+0xce>
 3b6:	4a c0       	rjmp	.+148    	; 0x44c <DIO_GetPinValue+0xf6>
		{
			case DIO_PORTA: u8ResultLocal= GET_BIT(DIO_u8PINA_REG,u8PinIdCopy); break;
 3b8:	e9 e3       	ldi	r30, 0x39	; 57
 3ba:	f0 e0       	ldi	r31, 0x00	; 0
 3bc:	80 81       	ld	r24, Z
 3be:	28 2f       	mov	r18, r24
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	8b 81       	ldd	r24, Y+3	; 0x03
 3c4:	88 2f       	mov	r24, r24
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	a9 01       	movw	r20, r18
 3ca:	02 c0       	rjmp	.+4      	; 0x3d0 <DIO_GetPinValue+0x7a>
 3cc:	55 95       	asr	r21
 3ce:	47 95       	ror	r20
 3d0:	8a 95       	dec	r24
 3d2:	e2 f7       	brpl	.-8      	; 0x3cc <DIO_GetPinValue+0x76>
 3d4:	ca 01       	movw	r24, r20
 3d6:	81 70       	andi	r24, 0x01	; 1
 3d8:	89 83       	std	Y+1, r24	; 0x01
 3da:	38 c0       	rjmp	.+112    	; 0x44c <DIO_GetPinValue+0xf6>
			case DIO_PORTB: u8ResultLocal= GET_BIT(DIO_u8PINB_REG,u8PinIdCopy); break;
 3dc:	e6 e3       	ldi	r30, 0x36	; 54
 3de:	f0 e0       	ldi	r31, 0x00	; 0
 3e0:	80 81       	ld	r24, Z
 3e2:	28 2f       	mov	r18, r24
 3e4:	30 e0       	ldi	r19, 0x00	; 0
 3e6:	8b 81       	ldd	r24, Y+3	; 0x03
 3e8:	88 2f       	mov	r24, r24
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	a9 01       	movw	r20, r18
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_GetPinValue+0x9e>
 3f0:	55 95       	asr	r21
 3f2:	47 95       	ror	r20
 3f4:	8a 95       	dec	r24
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_GetPinValue+0x9a>
 3f8:	ca 01       	movw	r24, r20
 3fa:	81 70       	andi	r24, 0x01	; 1
 3fc:	89 83       	std	Y+1, r24	; 0x01
 3fe:	26 c0       	rjmp	.+76     	; 0x44c <DIO_GetPinValue+0xf6>
			case DIO_PORTC: u8ResultLocal= GET_BIT(DIO_u8PINC_REG,u8PinIdCopy); break;
 400:	e3 e3       	ldi	r30, 0x33	; 51
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	28 2f       	mov	r18, r24
 408:	30 e0       	ldi	r19, 0x00	; 0
 40a:	8b 81       	ldd	r24, Y+3	; 0x03
 40c:	88 2f       	mov	r24, r24
 40e:	90 e0       	ldi	r25, 0x00	; 0
 410:	a9 01       	movw	r20, r18
 412:	02 c0       	rjmp	.+4      	; 0x418 <DIO_GetPinValue+0xc2>
 414:	55 95       	asr	r21
 416:	47 95       	ror	r20
 418:	8a 95       	dec	r24
 41a:	e2 f7       	brpl	.-8      	; 0x414 <DIO_GetPinValue+0xbe>
 41c:	ca 01       	movw	r24, r20
 41e:	81 70       	andi	r24, 0x01	; 1
 420:	89 83       	std	Y+1, r24	; 0x01
 422:	14 c0       	rjmp	.+40     	; 0x44c <DIO_GetPinValue+0xf6>
			case DIO_PORTD: u8ResultLocal= GET_BIT(DIO_u8PIND_REG,u8PinIdCopy); break;
 424:	e0 e3       	ldi	r30, 0x30	; 48
 426:	f0 e0       	ldi	r31, 0x00	; 0
 428:	80 81       	ld	r24, Z
 42a:	28 2f       	mov	r18, r24
 42c:	30 e0       	ldi	r19, 0x00	; 0
 42e:	8b 81       	ldd	r24, Y+3	; 0x03
 430:	88 2f       	mov	r24, r24
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	a9 01       	movw	r20, r18
 436:	02 c0       	rjmp	.+4      	; 0x43c <DIO_GetPinValue+0xe6>
 438:	55 95       	asr	r21
 43a:	47 95       	ror	r20
 43c:	8a 95       	dec	r24
 43e:	e2 f7       	brpl	.-8      	; 0x438 <DIO_GetPinValue+0xe2>
 440:	ca 01       	movw	r24, r20
 442:	81 70       	andi	r24, 0x01	; 1
 444:	89 83       	std	Y+1, r24	; 0x01
 446:	02 c0       	rjmp	.+4      	; 0x44c <DIO_GetPinValue+0xf6>
	}

	else
	{
		/* return 0xff in case of error in the Pin ID or PORT ID */
		u8ResultLocal = 0xFF;
 448:	8f ef       	ldi	r24, 0xFF	; 255
 44a:	89 83       	std	Y+1, r24	; 0x01
	}

	return u8ResultLocal;
 44c:	89 81       	ldd	r24, Y+1	; 0x01
}
 44e:	0f 90       	pop	r0
 450:	0f 90       	pop	r0
 452:	0f 90       	pop	r0
 454:	0f 90       	pop	r0
 456:	0f 90       	pop	r0
 458:	cf 91       	pop	r28
 45a:	df 91       	pop	r29
 45c:	08 95       	ret

0000045e <DIO_SetPinDirection>:

extern void DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
 45e:	df 93       	push	r29
 460:	cf 93       	push	r28
 462:	cd b7       	in	r28, 0x3d	; 61
 464:	de b7       	in	r29, 0x3e	; 62
 466:	27 97       	sbiw	r28, 0x07	; 7
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	f8 94       	cli
 46c:	de bf       	out	0x3e, r29	; 62
 46e:	0f be       	out	0x3f, r0	; 63
 470:	cd bf       	out	0x3d, r28	; 61
 472:	89 83       	std	Y+1, r24	; 0x01
 474:	6a 83       	std	Y+2, r22	; 0x02
 476:	4b 83       	std	Y+3, r20	; 0x03
	/* Make sure that the Port ID and Pin ID are in the valid range */
	if ((u8PortIdCopy <= DIO_PORTD) && (u8PinIdCopy <= DIO_PIN7))
 478:	89 81       	ldd	r24, Y+1	; 0x01
 47a:	84 30       	cpi	r24, 0x04	; 4
 47c:	08 f0       	brcs	.+2      	; 0x480 <__stack+0x21>
 47e:	ee c0       	rjmp	.+476    	; 0x65c <__stack+0x1fd>
 480:	8a 81       	ldd	r24, Y+2	; 0x02
 482:	88 30       	cpi	r24, 0x08	; 8
 484:	08 f0       	brcs	.+2      	; 0x488 <__stack+0x29>
 486:	ea c0       	rjmp	.+468    	; 0x65c <__stack+0x1fd>
	{
		if ( u8PinDirCopy == DIO_OUTPUT )
 488:	8b 81       	ldd	r24, Y+3	; 0x03
 48a:	8f 3f       	cpi	r24, 0xFF	; 255
 48c:	09 f0       	breq	.+2      	; 0x490 <__stack+0x31>
 48e:	6f c0       	rjmp	.+222    	; 0x56e <__stack+0x10f>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 490:	89 81       	ldd	r24, Y+1	; 0x01
 492:	28 2f       	mov	r18, r24
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	3f 83       	std	Y+7, r19	; 0x07
 498:	2e 83       	std	Y+6, r18	; 0x06
 49a:	8e 81       	ldd	r24, Y+6	; 0x06
 49c:	9f 81       	ldd	r25, Y+7	; 0x07
 49e:	81 30       	cpi	r24, 0x01	; 1
 4a0:	91 05       	cpc	r25, r1
 4a2:	49 f1       	breq	.+82     	; 0x4f6 <__stack+0x97>
 4a4:	2e 81       	ldd	r18, Y+6	; 0x06
 4a6:	3f 81       	ldd	r19, Y+7	; 0x07
 4a8:	22 30       	cpi	r18, 0x02	; 2
 4aa:	31 05       	cpc	r19, r1
 4ac:	2c f4       	brge	.+10     	; 0x4b8 <__stack+0x59>
 4ae:	8e 81       	ldd	r24, Y+6	; 0x06
 4b0:	9f 81       	ldd	r25, Y+7	; 0x07
 4b2:	00 97       	sbiw	r24, 0x00	; 0
 4b4:	61 f0       	breq	.+24     	; 0x4ce <__stack+0x6f>
 4b6:	d2 c0       	rjmp	.+420    	; 0x65c <__stack+0x1fd>
 4b8:	2e 81       	ldd	r18, Y+6	; 0x06
 4ba:	3f 81       	ldd	r19, Y+7	; 0x07
 4bc:	22 30       	cpi	r18, 0x02	; 2
 4be:	31 05       	cpc	r19, r1
 4c0:	71 f1       	breq	.+92     	; 0x51e <__stack+0xbf>
 4c2:	8e 81       	ldd	r24, Y+6	; 0x06
 4c4:	9f 81       	ldd	r25, Y+7	; 0x07
 4c6:	83 30       	cpi	r24, 0x03	; 3
 4c8:	91 05       	cpc	r25, r1
 4ca:	e9 f1       	breq	.+122    	; 0x546 <__stack+0xe7>
 4cc:	c7 c0       	rjmp	.+398    	; 0x65c <__stack+0x1fd>
			{
				case DIO_PORTA: SET_BIT(DIO_u8DDRA_REG,u8PinIdCopy); break;
 4ce:	aa e3       	ldi	r26, 0x3A	; 58
 4d0:	b0 e0       	ldi	r27, 0x00	; 0
 4d2:	ea e3       	ldi	r30, 0x3A	; 58
 4d4:	f0 e0       	ldi	r31, 0x00	; 0
 4d6:	80 81       	ld	r24, Z
 4d8:	48 2f       	mov	r20, r24
 4da:	8a 81       	ldd	r24, Y+2	; 0x02
 4dc:	28 2f       	mov	r18, r24
 4de:	30 e0       	ldi	r19, 0x00	; 0
 4e0:	81 e0       	ldi	r24, 0x01	; 1
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	02 2e       	mov	r0, r18
 4e6:	02 c0       	rjmp	.+4      	; 0x4ec <__stack+0x8d>
 4e8:	88 0f       	add	r24, r24
 4ea:	99 1f       	adc	r25, r25
 4ec:	0a 94       	dec	r0
 4ee:	e2 f7       	brpl	.-8      	; 0x4e8 <__stack+0x89>
 4f0:	84 2b       	or	r24, r20
 4f2:	8c 93       	st	X, r24
 4f4:	b3 c0       	rjmp	.+358    	; 0x65c <__stack+0x1fd>
				case DIO_PORTB: SET_BIT(DIO_u8DDRB_REG,u8PinIdCopy); break;
 4f6:	a7 e3       	ldi	r26, 0x37	; 55
 4f8:	b0 e0       	ldi	r27, 0x00	; 0
 4fa:	e7 e3       	ldi	r30, 0x37	; 55
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	48 2f       	mov	r20, r24
 502:	8a 81       	ldd	r24, Y+2	; 0x02
 504:	28 2f       	mov	r18, r24
 506:	30 e0       	ldi	r19, 0x00	; 0
 508:	81 e0       	ldi	r24, 0x01	; 1
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	02 2e       	mov	r0, r18
 50e:	02 c0       	rjmp	.+4      	; 0x514 <__stack+0xb5>
 510:	88 0f       	add	r24, r24
 512:	99 1f       	adc	r25, r25
 514:	0a 94       	dec	r0
 516:	e2 f7       	brpl	.-8      	; 0x510 <__stack+0xb1>
 518:	84 2b       	or	r24, r20
 51a:	8c 93       	st	X, r24
 51c:	9f c0       	rjmp	.+318    	; 0x65c <__stack+0x1fd>
				case DIO_PORTC: SET_BIT(DIO_u8DDRC_REG,u8PinIdCopy); break;
 51e:	a4 e3       	ldi	r26, 0x34	; 52
 520:	b0 e0       	ldi	r27, 0x00	; 0
 522:	e4 e3       	ldi	r30, 0x34	; 52
 524:	f0 e0       	ldi	r31, 0x00	; 0
 526:	80 81       	ld	r24, Z
 528:	48 2f       	mov	r20, r24
 52a:	8a 81       	ldd	r24, Y+2	; 0x02
 52c:	28 2f       	mov	r18, r24
 52e:	30 e0       	ldi	r19, 0x00	; 0
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	90 e0       	ldi	r25, 0x00	; 0
 534:	02 2e       	mov	r0, r18
 536:	02 c0       	rjmp	.+4      	; 0x53c <__stack+0xdd>
 538:	88 0f       	add	r24, r24
 53a:	99 1f       	adc	r25, r25
 53c:	0a 94       	dec	r0
 53e:	e2 f7       	brpl	.-8      	; 0x538 <__stack+0xd9>
 540:	84 2b       	or	r24, r20
 542:	8c 93       	st	X, r24
 544:	8b c0       	rjmp	.+278    	; 0x65c <__stack+0x1fd>
				case DIO_PORTD: SET_BIT(DIO_u8DDRD_REG,u8PinIdCopy); break;
 546:	a1 e3       	ldi	r26, 0x31	; 49
 548:	b0 e0       	ldi	r27, 0x00	; 0
 54a:	e1 e3       	ldi	r30, 0x31	; 49
 54c:	f0 e0       	ldi	r31, 0x00	; 0
 54e:	80 81       	ld	r24, Z
 550:	48 2f       	mov	r20, r24
 552:	8a 81       	ldd	r24, Y+2	; 0x02
 554:	28 2f       	mov	r18, r24
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	81 e0       	ldi	r24, 0x01	; 1
 55a:	90 e0       	ldi	r25, 0x00	; 0
 55c:	02 2e       	mov	r0, r18
 55e:	02 c0       	rjmp	.+4      	; 0x564 <__stack+0x105>
 560:	88 0f       	add	r24, r24
 562:	99 1f       	adc	r25, r25
 564:	0a 94       	dec	r0
 566:	e2 f7       	brpl	.-8      	; 0x560 <__stack+0x101>
 568:	84 2b       	or	r24, r20
 56a:	8c 93       	st	X, r24
 56c:	77 c0       	rjmp	.+238    	; 0x65c <__stack+0x1fd>
			}
		}

		else if ( u8PinDirCopy == DIO_INPUT )
 56e:	8b 81       	ldd	r24, Y+3	; 0x03
 570:	88 23       	and	r24, r24
 572:	09 f0       	breq	.+2      	; 0x576 <__stack+0x117>
 574:	73 c0       	rjmp	.+230    	; 0x65c <__stack+0x1fd>
		{
			/* Check on the Required PORT Number */
			switch (u8PortIdCopy)
 576:	89 81       	ldd	r24, Y+1	; 0x01
 578:	28 2f       	mov	r18, r24
 57a:	30 e0       	ldi	r19, 0x00	; 0
 57c:	3d 83       	std	Y+5, r19	; 0x05
 57e:	2c 83       	std	Y+4, r18	; 0x04
 580:	8c 81       	ldd	r24, Y+4	; 0x04
 582:	9d 81       	ldd	r25, Y+5	; 0x05
 584:	81 30       	cpi	r24, 0x01	; 1
 586:	91 05       	cpc	r25, r1
 588:	59 f1       	breq	.+86     	; 0x5e0 <__stack+0x181>
 58a:	2c 81       	ldd	r18, Y+4	; 0x04
 58c:	3d 81       	ldd	r19, Y+5	; 0x05
 58e:	22 30       	cpi	r18, 0x02	; 2
 590:	31 05       	cpc	r19, r1
 592:	2c f4       	brge	.+10     	; 0x59e <__stack+0x13f>
 594:	8c 81       	ldd	r24, Y+4	; 0x04
 596:	9d 81       	ldd	r25, Y+5	; 0x05
 598:	00 97       	sbiw	r24, 0x00	; 0
 59a:	69 f0       	breq	.+26     	; 0x5b6 <__stack+0x157>
 59c:	5f c0       	rjmp	.+190    	; 0x65c <__stack+0x1fd>
 59e:	2c 81       	ldd	r18, Y+4	; 0x04
 5a0:	3d 81       	ldd	r19, Y+5	; 0x05
 5a2:	22 30       	cpi	r18, 0x02	; 2
 5a4:	31 05       	cpc	r19, r1
 5a6:	89 f1       	breq	.+98     	; 0x60a <__stack+0x1ab>
 5a8:	8c 81       	ldd	r24, Y+4	; 0x04
 5aa:	9d 81       	ldd	r25, Y+5	; 0x05
 5ac:	83 30       	cpi	r24, 0x03	; 3
 5ae:	91 05       	cpc	r25, r1
 5b0:	09 f4       	brne	.+2      	; 0x5b4 <__stack+0x155>
 5b2:	40 c0       	rjmp	.+128    	; 0x634 <__stack+0x1d5>
 5b4:	53 c0       	rjmp	.+166    	; 0x65c <__stack+0x1fd>
			{
				case DIO_PORTA: CLR_BIT(DIO_u8DDRA_REG,u8PinIdCopy); break;
 5b6:	aa e3       	ldi	r26, 0x3A	; 58
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	ea e3       	ldi	r30, 0x3A	; 58
 5bc:	f0 e0       	ldi	r31, 0x00	; 0
 5be:	80 81       	ld	r24, Z
 5c0:	48 2f       	mov	r20, r24
 5c2:	8a 81       	ldd	r24, Y+2	; 0x02
 5c4:	28 2f       	mov	r18, r24
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	81 e0       	ldi	r24, 0x01	; 1
 5ca:	90 e0       	ldi	r25, 0x00	; 0
 5cc:	02 2e       	mov	r0, r18
 5ce:	02 c0       	rjmp	.+4      	; 0x5d4 <__stack+0x175>
 5d0:	88 0f       	add	r24, r24
 5d2:	99 1f       	adc	r25, r25
 5d4:	0a 94       	dec	r0
 5d6:	e2 f7       	brpl	.-8      	; 0x5d0 <__stack+0x171>
 5d8:	80 95       	com	r24
 5da:	84 23       	and	r24, r20
 5dc:	8c 93       	st	X, r24
 5de:	3e c0       	rjmp	.+124    	; 0x65c <__stack+0x1fd>
				case DIO_PORTB: CLR_BIT(DIO_u8DDRB_REG,u8PinIdCopy); break;
 5e0:	a7 e3       	ldi	r26, 0x37	; 55
 5e2:	b0 e0       	ldi	r27, 0x00	; 0
 5e4:	e7 e3       	ldi	r30, 0x37	; 55
 5e6:	f0 e0       	ldi	r31, 0x00	; 0
 5e8:	80 81       	ld	r24, Z
 5ea:	48 2f       	mov	r20, r24
 5ec:	8a 81       	ldd	r24, Y+2	; 0x02
 5ee:	28 2f       	mov	r18, r24
 5f0:	30 e0       	ldi	r19, 0x00	; 0
 5f2:	81 e0       	ldi	r24, 0x01	; 1
 5f4:	90 e0       	ldi	r25, 0x00	; 0
 5f6:	02 2e       	mov	r0, r18
 5f8:	02 c0       	rjmp	.+4      	; 0x5fe <__stack+0x19f>
 5fa:	88 0f       	add	r24, r24
 5fc:	99 1f       	adc	r25, r25
 5fe:	0a 94       	dec	r0
 600:	e2 f7       	brpl	.-8      	; 0x5fa <__stack+0x19b>
 602:	80 95       	com	r24
 604:	84 23       	and	r24, r20
 606:	8c 93       	st	X, r24
 608:	29 c0       	rjmp	.+82     	; 0x65c <__stack+0x1fd>
				case DIO_PORTC: CLR_BIT(DIO_u8DDRC_REG,u8PinIdCopy); break;
 60a:	a4 e3       	ldi	r26, 0x34	; 52
 60c:	b0 e0       	ldi	r27, 0x00	; 0
 60e:	e4 e3       	ldi	r30, 0x34	; 52
 610:	f0 e0       	ldi	r31, 0x00	; 0
 612:	80 81       	ld	r24, Z
 614:	48 2f       	mov	r20, r24
 616:	8a 81       	ldd	r24, Y+2	; 0x02
 618:	28 2f       	mov	r18, r24
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	81 e0       	ldi	r24, 0x01	; 1
 61e:	90 e0       	ldi	r25, 0x00	; 0
 620:	02 2e       	mov	r0, r18
 622:	02 c0       	rjmp	.+4      	; 0x628 <__stack+0x1c9>
 624:	88 0f       	add	r24, r24
 626:	99 1f       	adc	r25, r25
 628:	0a 94       	dec	r0
 62a:	e2 f7       	brpl	.-8      	; 0x624 <__stack+0x1c5>
 62c:	80 95       	com	r24
 62e:	84 23       	and	r24, r20
 630:	8c 93       	st	X, r24
 632:	14 c0       	rjmp	.+40     	; 0x65c <__stack+0x1fd>
				case DIO_PORTD: CLR_BIT(DIO_u8DDRD_REG,u8PinIdCopy); break;
 634:	a1 e3       	ldi	r26, 0x31	; 49
 636:	b0 e0       	ldi	r27, 0x00	; 0
 638:	e1 e3       	ldi	r30, 0x31	; 49
 63a:	f0 e0       	ldi	r31, 0x00	; 0
 63c:	80 81       	ld	r24, Z
 63e:	48 2f       	mov	r20, r24
 640:	8a 81       	ldd	r24, Y+2	; 0x02
 642:	28 2f       	mov	r18, r24
 644:	30 e0       	ldi	r19, 0x00	; 0
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	90 e0       	ldi	r25, 0x00	; 0
 64a:	02 2e       	mov	r0, r18
 64c:	02 c0       	rjmp	.+4      	; 0x652 <__stack+0x1f3>
 64e:	88 0f       	add	r24, r24
 650:	99 1f       	adc	r25, r25
 652:	0a 94       	dec	r0
 654:	e2 f7       	brpl	.-8      	; 0x64e <__stack+0x1ef>
 656:	80 95       	com	r24
 658:	84 23       	and	r24, r20
 65a:	8c 93       	st	X, r24

	else
	{
		/* Do nothing, Error in the Pin ID or PORT ID */
	}
}
 65c:	27 96       	adiw	r28, 0x07	; 7
 65e:	0f b6       	in	r0, 0x3f	; 63
 660:	f8 94       	cli
 662:	de bf       	out	0x3e, r29	; 62
 664:	0f be       	out	0x3f, r0	; 63
 666:	cd bf       	out	0x3d, r28	; 61
 668:	cf 91       	pop	r28
 66a:	df 91       	pop	r29
 66c:	08 95       	ret

0000066e <DIO_SetPortDirection>:


/* IO Ports */
extern void DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
 66e:	df 93       	push	r29
 670:	cf 93       	push	r28
 672:	00 d0       	rcall	.+0      	; 0x674 <DIO_SetPortDirection+0x6>
 674:	00 d0       	rcall	.+0      	; 0x676 <DIO_SetPortDirection+0x8>
 676:	cd b7       	in	r28, 0x3d	; 61
 678:	de b7       	in	r29, 0x3e	; 62
 67a:	89 83       	std	Y+1, r24	; 0x01
 67c:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
 67e:	89 81       	ldd	r24, Y+1	; 0x01
 680:	28 2f       	mov	r18, r24
 682:	30 e0       	ldi	r19, 0x00	; 0
 684:	3c 83       	std	Y+4, r19	; 0x04
 686:	2b 83       	std	Y+3, r18	; 0x03
 688:	8b 81       	ldd	r24, Y+3	; 0x03
 68a:	9c 81       	ldd	r25, Y+4	; 0x04
 68c:	81 30       	cpi	r24, 0x01	; 1
 68e:	91 05       	cpc	r25, r1
 690:	d1 f0       	breq	.+52     	; 0x6c6 <DIO_SetPortDirection+0x58>
 692:	2b 81       	ldd	r18, Y+3	; 0x03
 694:	3c 81       	ldd	r19, Y+4	; 0x04
 696:	22 30       	cpi	r18, 0x02	; 2
 698:	31 05       	cpc	r19, r1
 69a:	2c f4       	brge	.+10     	; 0x6a6 <DIO_SetPortDirection+0x38>
 69c:	8b 81       	ldd	r24, Y+3	; 0x03
 69e:	9c 81       	ldd	r25, Y+4	; 0x04
 6a0:	00 97       	sbiw	r24, 0x00	; 0
 6a2:	61 f0       	breq	.+24     	; 0x6bc <DIO_SetPortDirection+0x4e>
 6a4:	1e c0       	rjmp	.+60     	; 0x6e2 <DIO_SetPortDirection+0x74>
 6a6:	2b 81       	ldd	r18, Y+3	; 0x03
 6a8:	3c 81       	ldd	r19, Y+4	; 0x04
 6aa:	22 30       	cpi	r18, 0x02	; 2
 6ac:	31 05       	cpc	r19, r1
 6ae:	81 f0       	breq	.+32     	; 0x6d0 <DIO_SetPortDirection+0x62>
 6b0:	8b 81       	ldd	r24, Y+3	; 0x03
 6b2:	9c 81       	ldd	r25, Y+4	; 0x04
 6b4:	83 30       	cpi	r24, 0x03	; 3
 6b6:	91 05       	cpc	r25, r1
 6b8:	81 f0       	breq	.+32     	; 0x6da <DIO_SetPortDirection+0x6c>
 6ba:	13 c0       	rjmp	.+38     	; 0x6e2 <DIO_SetPortDirection+0x74>
	{
		case     DIO_PORTA: DIO_u8DDRA_REG = u8PortDir; break;
 6bc:	ea e3       	ldi	r30, 0x3A	; 58
 6be:	f0 e0       	ldi	r31, 0x00	; 0
 6c0:	8a 81       	ldd	r24, Y+2	; 0x02
 6c2:	80 83       	st	Z, r24
 6c4:	0e c0       	rjmp	.+28     	; 0x6e2 <DIO_SetPortDirection+0x74>
		case     DIO_PORTB: DIO_u8DDRB_REG = u8PortDir; break;
 6c6:	e7 e3       	ldi	r30, 0x37	; 55
 6c8:	f0 e0       	ldi	r31, 0x00	; 0
 6ca:	8a 81       	ldd	r24, Y+2	; 0x02
 6cc:	80 83       	st	Z, r24
 6ce:	09 c0       	rjmp	.+18     	; 0x6e2 <DIO_SetPortDirection+0x74>
		case     DIO_PORTC: DIO_u8DDRC_REG = u8PortDir; break;
 6d0:	e4 e3       	ldi	r30, 0x34	; 52
 6d2:	f0 e0       	ldi	r31, 0x00	; 0
 6d4:	8a 81       	ldd	r24, Y+2	; 0x02
 6d6:	80 83       	st	Z, r24
 6d8:	04 c0       	rjmp	.+8      	; 0x6e2 <DIO_SetPortDirection+0x74>
		case     DIO_PORTD: DIO_u8DDRD_REG = u8PortDir; break;
 6da:	e1 e3       	ldi	r30, 0x31	; 49
 6dc:	f0 e0       	ldi	r31, 0x00	; 0
 6de:	8a 81       	ldd	r24, Y+2	; 0x02
 6e0:	80 83       	st	Z, r24
		default: /* Wrong Port ID */       break;
	}
}
 6e2:	0f 90       	pop	r0
 6e4:	0f 90       	pop	r0
 6e6:	0f 90       	pop	r0
 6e8:	0f 90       	pop	r0
 6ea:	cf 91       	pop	r28
 6ec:	df 91       	pop	r29
 6ee:	08 95       	ret

000006f0 <DIO_SetPortValue>:

extern void DIO_SetPortValue (u8 u8PortId, u8 u8PortVal)
{
 6f0:	df 93       	push	r29
 6f2:	cf 93       	push	r28
 6f4:	00 d0       	rcall	.+0      	; 0x6f6 <DIO_SetPortValue+0x6>
 6f6:	00 d0       	rcall	.+0      	; 0x6f8 <DIO_SetPortValue+0x8>
 6f8:	cd b7       	in	r28, 0x3d	; 61
 6fa:	de b7       	in	r29, 0x3e	; 62
 6fc:	89 83       	std	Y+1, r24	; 0x01
 6fe:	6a 83       	std	Y+2, r22	; 0x02
	/* Check on the Required PORT Number */
	switch (u8PortId)
 700:	89 81       	ldd	r24, Y+1	; 0x01
 702:	28 2f       	mov	r18, r24
 704:	30 e0       	ldi	r19, 0x00	; 0
 706:	3c 83       	std	Y+4, r19	; 0x04
 708:	2b 83       	std	Y+3, r18	; 0x03
 70a:	8b 81       	ldd	r24, Y+3	; 0x03
 70c:	9c 81       	ldd	r25, Y+4	; 0x04
 70e:	81 30       	cpi	r24, 0x01	; 1
 710:	91 05       	cpc	r25, r1
 712:	d1 f0       	breq	.+52     	; 0x748 <DIO_SetPortValue+0x58>
 714:	2b 81       	ldd	r18, Y+3	; 0x03
 716:	3c 81       	ldd	r19, Y+4	; 0x04
 718:	22 30       	cpi	r18, 0x02	; 2
 71a:	31 05       	cpc	r19, r1
 71c:	2c f4       	brge	.+10     	; 0x728 <DIO_SetPortValue+0x38>
 71e:	8b 81       	ldd	r24, Y+3	; 0x03
 720:	9c 81       	ldd	r25, Y+4	; 0x04
 722:	00 97       	sbiw	r24, 0x00	; 0
 724:	61 f0       	breq	.+24     	; 0x73e <DIO_SetPortValue+0x4e>
 726:	1e c0       	rjmp	.+60     	; 0x764 <DIO_SetPortValue+0x74>
 728:	2b 81       	ldd	r18, Y+3	; 0x03
 72a:	3c 81       	ldd	r19, Y+4	; 0x04
 72c:	22 30       	cpi	r18, 0x02	; 2
 72e:	31 05       	cpc	r19, r1
 730:	81 f0       	breq	.+32     	; 0x752 <DIO_SetPortValue+0x62>
 732:	8b 81       	ldd	r24, Y+3	; 0x03
 734:	9c 81       	ldd	r25, Y+4	; 0x04
 736:	83 30       	cpi	r24, 0x03	; 3
 738:	91 05       	cpc	r25, r1
 73a:	81 f0       	breq	.+32     	; 0x75c <DIO_SetPortValue+0x6c>
 73c:	13 c0       	rjmp	.+38     	; 0x764 <DIO_SetPortValue+0x74>
	{
		case     DIO_PORTA: DIO_u8PORTA_REG = u8PortVal; break;
 73e:	eb e3       	ldi	r30, 0x3B	; 59
 740:	f0 e0       	ldi	r31, 0x00	; 0
 742:	8a 81       	ldd	r24, Y+2	; 0x02
 744:	80 83       	st	Z, r24
 746:	0e c0       	rjmp	.+28     	; 0x764 <DIO_SetPortValue+0x74>
		case     DIO_PORTB: DIO_u8PORTB_REG = u8PortVal; break;
 748:	e8 e3       	ldi	r30, 0x38	; 56
 74a:	f0 e0       	ldi	r31, 0x00	; 0
 74c:	8a 81       	ldd	r24, Y+2	; 0x02
 74e:	80 83       	st	Z, r24
 750:	09 c0       	rjmp	.+18     	; 0x764 <DIO_SetPortValue+0x74>
		case     DIO_PORTC: DIO_u8PORTC_REG = u8PortVal; break;
 752:	e5 e3       	ldi	r30, 0x35	; 53
 754:	f0 e0       	ldi	r31, 0x00	; 0
 756:	8a 81       	ldd	r24, Y+2	; 0x02
 758:	80 83       	st	Z, r24
 75a:	04 c0       	rjmp	.+8      	; 0x764 <DIO_SetPortValue+0x74>
		case     DIO_PORTD: DIO_u8PORTD_REG = u8PortVal; break;
 75c:	e2 e3       	ldi	r30, 0x32	; 50
 75e:	f0 e0       	ldi	r31, 0x00	; 0
 760:	8a 81       	ldd	r24, Y+2	; 0x02
 762:	80 83       	st	Z, r24
		default: /* Wrong Port ID */        break;
	}
}
 764:	0f 90       	pop	r0
 766:	0f 90       	pop	r0
 768:	0f 90       	pop	r0
 76a:	0f 90       	pop	r0
 76c:	cf 91       	pop	r28
 76e:	df 91       	pop	r29
 770:	08 95       	ret

00000772 <main>:
#include "ADC_interface.h"
/*In this application we need to read output from potentiometer and the out would be
 * on the port C on LED'S
 * */
void main (void)
{
 772:	df 93       	push	r29
 774:	cf 93       	push	r28
 776:	0f 92       	push	r0
 778:	cd b7       	in	r28, 0x3d	; 61
 77a:	de b7       	in	r29, 0x3e	; 62
	 * and other pins that are being used as output to make specific function
	 * ---all these done as  next
	 * assume A is input all pins
	 * and    C is output all pins */

	DIO_SetPortDirection(DIO_PORTA,DIO_INPUT);  //input
 77c:	80 e0       	ldi	r24, 0x00	; 0
 77e:	60 e0       	ldi	r22, 0x00	; 0
 780:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPortDirection>

	DIO_SetPortDirection(DIO_PORTC,DIO_OUTPUT); //output
 784:	82 e0       	ldi	r24, 0x02	; 2
 786:	6f ef       	ldi	r22, 0xFF	; 255
 788:	0e 94 37 03 	call	0x66e	; 0x66e <DIO_SetPortDirection>

	while(1)
	{
		Get_ADC_READ=ADC_ChannelReading(0); //the POTINTIO out connected to PORT(A) _ PIN(0)
 78c:	80 e0       	ldi	r24, 0x00	; 0
 78e:	0e 94 6e 00 	call	0xdc	; 0xdc <ADC_ChannelReading>
 792:	89 83       	std	Y+1, r24	; 0x01
		/*now the stored value coming from potentiometer we want it on port(C) as digital
		 * value  */
		DIO_SetPortValue(DIO_PORTC,Get_ADC_READ);
 794:	82 e0       	ldi	r24, 0x02	; 2
 796:	69 81       	ldd	r22, Y+1	; 0x01
 798:	0e 94 78 03 	call	0x6f0	; 0x6f0 <DIO_SetPortValue>
 79c:	f7 cf       	rjmp	.-18     	; 0x78c <main+0x1a>

0000079e <_exit>:
 79e:	f8 94       	cli

000007a0 <__stop_program>:
 7a0:	ff cf       	rjmp	.-2      	; 0x7a0 <__stop_program>
